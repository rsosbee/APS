! $Id$: SY_531APSCompany_bus.pvc $
! Company Code BUS Object
! Copyright 2013-2019 Accounting Systems, Inc.
!
DEF CLASS "SY_531APSCompany_bus" CREATE REQUIRED DELETE REQUIRED
	! Inherits from the following class(es)
	LIKE "SY_Company_bus"
	LIKE "SY_531APSTableCreation" ! PLW 2019-04-17  Ticket #250723 moved table creation to separate library so it can be shared.
	
	! Public Properties
	PROPERTY APSActivated
	PROPERTY APSCCEnabled
	PROPERTY APSC2PEnabled
	PROPERTY cSkipCardConversion ! PLW Ticket #235697 2018-03-20 flag from AR_531APSConvertToAPS
	
	PROPERTY D531_APSIOList$ GET getD531_APSIOList SET ERR
	PROPERTY RecordChanged GET RECORD_CHANGED	SET ERR		! Has the record changed
	PROPERTY C2PDefault

	! Local/Private Properties
	LOCAL cD531_APSCompanyFH
	LOCAL coAPSActivation
	LOCAL cAPSOrigRcd$
	LOCAL coPaymentTypeChild
	
	! Public Functions (Methods)
	! ** Check AR_PaymentType records for 'Credit Card' Payment Methods with valid connections
	! ** @returns retSUCCESS if there are any 'Credit Card' Payment Methods with valid connections
	FUNCTION CheckProcessingPaymentTypesExist()								CHECK_PROCESSING_PAYMENT_TYPES_EXIST
	FUNCTION WRITE () 														WRITE
	FUNCTION CLEAR () 														CLEAR
	FUNCTION Delete(key$)													DELETE_REC
	FUNCTION ValidateC2P_ApiKey()											VALIDATE_C2P_API_KEY

	! Local/Private Functions (Methods)
	FUNCTION LOCAL PostWriteRec()											POST_WRITE_REC
	FUNCTION LOCAL ReadRec(APSkey$)											READ_REC
	FUNCTION LOCAL ValidateCreditCardEnable(APS531val$)						VALIDATE_CREDIT_CARD_ENABLE
	FUNCTION LOCAL ValidateD531APSLevelIIIProcessing(value$)				VALIDATE_LEVEL_III_PROCESSING
	FUNCTION LOCAL ValidateD531_C2PCCPaymentType(value$)					VALIDATE_CCPAYMENTTYPE
	FUNCTION LOCAL ValidateD531_C2PACHPaymentType(value$)					VALIDATE_ACHPAYMENTTYPE
	FUNCTION LOCAL ValidatePaymentType(value$,cPaymentTypeMethod$)			VALIDATE_PAYMENT_TYPE

	FUNCTION LOCAL SetChildColl()											SET_CHILD_COLL

	! Elements Defined Elsewhere, but Referenced Locally
	LOCAL coSession
END DEF
!

ON_CREATE:

	! check for activation
	coAPSActivation		= NEW("SY_531APSActivation_bus",coSession,ERR=*NEXT)
	IF coAPSActivation {
		APSActivated	= coAPSActivation'CheckAPSActivation ()
	}
 	IF APSActivated AND NOT(CCRegistered) {
 		CCRegistered	= 1
 	}
	DROP OBJECT coAPSActivation,err=*proceed;	coAPSActivation		= 0 ! #232007 - RCS
	! C2P Start
	cD531_APSCompanyFH	= coSession'openTable("SY_531APSCompany", pthSYSTEM$)
	STATIC IOL			= IOL(cD531_APSCompanyFH)
	cIOLIst$			+= SUB(MID(LST(IOL(cD531_APSCompanyFH)), 8), ",", SEP)+SEP ! PLW 2018-02-21 missing trailing SEP
RETURN
!

ON_DELETE:
	DROP OBJECT coAPSActivation,err=*proceed;	coAPSActivation		= 0 ! #232007 - RCS
	CLOSE (cD531_APSCompanyFH, ERR=*PROCEED);	cD531_APSCompanyFH	= 0
RETURN
!

CHECK_PROCESSING_PAYMENT_TYPES_EXIST:

	retVal				= _OBJ'CheckProcessingPaymentTypesExist(FROM "SY_531APSCompany_bus_BASE")

	IF retVal AND APSActivated {
		LastErrorNum$	= "SY_531APSDisableCreditCard.Y2"
		LastErrorMsg$	= MSG("SY_531APSDisableCreditCard.Y2")
	}

RETURN retVal
!

CLEAR:
	retVal				= _OBJ'CLEAR(FROM "SY_531APSCompany_bus_BASE")
	READ DATA FROM "" TO IOL=IOL(cD531_APSCompanyFH)
RETURN retVal
!

DELETE_REC:
ENTER (key$)

	retVal				= _OBJ'Delete(FROM "SY_531APSCompany_bus_BASE",key$)
	if retVal {
		REMOVE (cD531_APSCompanyFH, KEY=key$, ERR=*NEXT)
		READ DATA FROM "" TO IOL=IOL(cD531_APSCompanyFH)
	}

RETURN retVal
!

getD531_APSIOList:
RETURN IOL(cD531_APSCompanyFH)
!

POST_WRITE_REC:

	IF APSActivated {

		retVal			= retSUCCESS
		! Next line added cSkipCardConversion check PLW Ticket #235697 2018-03-20 flag from AR_531APSConvertToAPS
		IF NOT(cSkipCardConversion)					\
			AND POS(CreditCardEnable$	= "YAB")	\
			AND cOrigCreditCardEnable$	= isNO$		\
			AND NOT(NUL(D531APSApiKey$)) {			! #231342 - Yes, ACH, Both
		!	AND NOT(NUL(D531APSMerchantID$))		\
		!	AND NOT(NUL(D531APSPassword$)) {

			IF _OBJ'ARCreditCard {

				IF NOT(NUL(cOrigUnencryptedCreditCardVaultOnlyID$)) {

					! if we don't have SPS vault ID - we cannot convert credit cards to APS
					ARCreditCard'NumberOfConvertedCards		= 0

					retVal	= ARCreditCard'APSSwitchVaults(cOrigUnencryptedCreditCardVaultOnlyID$,		\
															cOrigUnencryptedCreditCardVaultOnlyKey$,	\
															D531APSMerchantID$,							\
															D531APSPassword$,							\
															$$,											\
															CompanyCode$,								\
															copyFlag,									\
															D531APSApiKey$)
				}

				retVal	= ARCreditCard'CopyAPSVaultToCCPaymentTypes(CompanyCode$,		\
																	D531APSMerchantID$,	\
																	D531APSPassword$,	\
																	D531APSApiKey$)		! RCS #236076 - 2018-12-05

				ARCreditCard'NumberOfConvertedCards			= 0
				ARCreditCard'UnlockConvFiles()

				IF NOT(retVal) {
					LastErrorNum$ 	= ARCreditCard'LastErrorNum$
					LastErrorMsg$ 	= ARCreditCard'LastErrorMsg$
				}

			} ELSE {
				retVal				= retFAILURE
				LastErrorNum$		= coSession'LastErrorNum$
				LastErrorMsg$		= coSession'LastErrorMsg$
			}
		}

		IF CreditCardEnable$ = isNO$ AND POS(cOrigCreditCardEnable$ = "YAB") AND cValidProcessingPayTypesExist { ! #231342 - Yes, ACH, Both
			! for now we decided to leave enterything as is
			! I just have to set CC setup tested to "N" for all payment types
			IF _OBJ'ARCreditCard {
				retVal 				= ARCreditCard'DisableAPSPaymentTypes(CompanyCode$)
				IF NOT(retVal) {
					LastErrorNum$	= ARCreditCard'LastErrorNum$
					LastErrorMsg$	= ARCreditCard'LastErrorMsg$
				}
				ARCreditCard'UnlockConvFiles()
			} ELSE {
				retVal				= retFAILURE
				LastErrorNum$		= coSession'LastErrorNum$
				LastErrorMsg$		= coSession'LastErrorMsg$
			}
		}

		IF CompanyName$<>cOrigCompanyName$ AND cCUMASCompFh {
			CUMASCompRecFound				= isFALSE
			READ(cCUMASCompFh, KNO="KCOMPANY", KEY=CompanyKey$, REC=cumascomp$, DOM=*NEXT); CUMASCompRecFound = isTRUE
			IF CUMASCompRecFound {
				cumascomp.MAS_CompanyName$	= CompanyName$
				cumascomp.Updated$			= isYES$
				WRITE(cCUMASCompFh, REC=cumascomp$, ERR=*NEXT)
				tmpVal 						= _OBJ'PushData(isTRUE)
			}
		}

		onLine = EVN("coSession'OnLine", ERR=*NEXT)

		IF onLine					\
			AND editstate = edtNEW	\
			AND PrefsDefaultCompany$ = isYES$ {
			! PrefsDefaultCompany$ = isYES$ indicates the creation of the 'active' online company, activate all modules silently

			oAct = NEW("SY_Activation_bus", coSession)

			IF coSession'UI {
				action$				= "init"
				title$				= "Activating installed modules for company " + CompanyCode$
				message$			= $$
				coSession'UI'ProgressBar(action$, title$, message$, 0)
			}

			SELECT *, REC=mod$ FROM cModuleFh,	\
				KNO = "kACTIVATIONORDER"		\
				BEGIN $$						\
				WHERE mod.ActivationSkip$ = isNO$

				IF coSession'UI {
					action$			= "update"
					message$		= "Activating " + mod.ModuleCode$
					coSession'UI'ProgressBar(action$, title$, message$, 0, "force")
				}

				oAct'Activate(mod.ModuleCode$, CompanyCode$, isFALSE, isTrue)
			NEXT RECORD

			IF coSession'UI {
				action$				= "close"
				coSession'UI'ProgressBar(action$)
			}
		}
	} ELSE {
		retVal						= _OBJ'PostWriteRec(FROM "SY_531APSCompany_bus_BASE")
	}

RETURN retVal
!

READ_REC:
ENTER (APSkey$)

	retVal				= _OBJ'ReadRec(FROM "SY_531APSCompany_bus_BASE",APSkey$)

	IF retVal {
 		APSActivated	= 0
 		! check for activation
 		if not(coAPSActivation) { coAPSActivation = NEW("SY_531APSActivation_bus",coSession,ERR=*NEXT) }
 		IF coAPSActivation {
 			tmpCompanyKey$		= CompanyKey$
 			IF NOT(NUL(tmpCompanyKey$)) {
 				APSActivated	= coAPSActivation'CheckAPSActivation (tmpCompanyKey$)
 			}
 		}
		IF APSActivated AND NOT(CCRegistered) { CCRegistered = 1 }

		! C2P Start #232007 - RCS
		%CompanyCode$	= Companycode$ ! for ALE lookup
		C2PDefault		= isFALSE
		cC2PRead		= 0
		READ (cD531_APSCompanyFH, KEY=CompanyKey$, ERR=*NEXT); cC2PRead = 1
		if not(cC2PRead) {
			! Set defaults
			READ DATA FROM "",rec=C2P$ TO IOL=IOL(cD531_APSCompanyFH)
			c2p.CompanyKey$						= CompanyKey$
			C2P.D531_APSCreditCardLog$			= "N"
			c2p.D531APSLevelIIIProcessing$		= "N"
			c2p.D531_C2PEnabled$				= "N"
			c2p.D531_C2PCurrency$				= "USD"
			c2p.D531_C2POptOut$					= "N"
			WRITE (cD531_APSCompanyFH,REC=C2P$) ! Sets defaults w/o triggering change rec.
			C2PDefault							= isTRUE
			READ (cD531_APSCompanyFH, KEY=CompanyKey$, ERR=*NEXT)
		}
		APSC2PEnabled	= D531_C2PEnabled$="Y"
		cAPSOrigRcd$	= rec(iol(cD531_APSCompanyFH))
	}
RETURN retVal
!

RECORD_CHANGED: ! logic copied from Sy_Maint;Record_Changed

	cEditRcd$			= REC(IOL(cFH))

	retVal				= ( (EditState=edtNEW) OR (EditState=edtEXISTS AND cEditRcd$<>cOrigRcd$) )

	cAPSEditRcd$		= rec(iol(cD531_APSCompanyFH))

	if not(retVal) {
		if EditState	= edtEXISTS AND cAPSOrigRcd$<>cAPSEditRcd$ {
			retVal		= retSUCCESS
		}
	}

RETURN retVal
!

SET_CHILD_COLL:
	retVal				= _OBJ'setChildColl(FROM "SY_531APSCompany_bus_BASE")
	rtnVal				= _OBJ'InitChildCollection("companyKey","SY_531APSCompany_SVC","companyKey$",$$, $$)
RETURN retVal
!

VALIDATE_ACHPAYMENTTYPE:
ENTER (value$)
	retval				= retSUCCESS

	tLevel				= coSession'ModuleLevel
	
	retval				= _obj'ValidatePaymentType(value$,PaymentTypeMethod$)
	
	if retVal and tLevel > 5.3 and PaymentTypeMethod$ <> "A" {
		retVal			= retFAILURE
	}
	
	if retVal and tLevel < 5.4 and PaymentTypeMethod$ <> "R" { ! override in 5.30 and below to allow ACH to process as Credit Card 2018-05-14 RCS
		retVal			= retFAILURE
	}
	
	IF not(retVal) {
		retVal			= retFAILURE
		LastErrorNum$	= "CI_Invalid"
		LastErrorMsg$	= MSG("CI_Invalid", "payment type for ClickToPay ACH payments")
	}

RETURN retVal
!


VALIDATE_CCPAYMENTTYPE:
ENTER (value$)
	retval				= retSUCCESS

	retval				= _obj'ValidatePaymentType(value$,PaymentTypeMethod$)

	IF not(retVal) or (retVal AND PaymentTypeMethod$ <> "R") {
		retVal			= retFAILURE
		LastErrorNum$	= "CI_Invalid"
		LastErrorMsg$	= MSG("CI_Invalid", "payment type for ClickToPay credit card")
	}

RETURN retVal
!

VALIDATE_CREDIT_CARD_ENABLE:
ENTER (APS531val$)

	IF APSActivated {

		retVal			= retSUCCESS

		IF NOT(CCRegistered) AND POS(APS531val$ = "YAB") { ! 231342 - Yes, ACH, Both
			mssg$			= "enable Credit Card Processing unless CC module is registered"
			LastErrorNum$	= "CI_Cannot"
			LastErrorMsg$	= MSG("CI_Cannot", mssg$)
			retVal			= retFAILURE
		}

		IF retVal {

			IF cOrigCreditCardEnable$ = isNO$ AND POS(APS531val$ = "YAB") { ! 231342 - Yes, ACH, Both
!				IF NOT(NUL(D531APSMerchantID$)) AND NOT(NUL(D531APSPassword$)) {
				IF NOT(NUL(D531APSApiKey$)) {

					IF _OBJ'ARCreditCard {
						retVal	= ARCreditCard'TestAPSCredentials((D531APSMerchantID$), (D531APSPassword$), (D531APSApiKey$))
						IF NOT(retVal = retSUCCESS) {
							IF POS("AUTHENTICATION FAILED"=ARCreditCard'LastErrorMsg$) {
								retVal			= retWARNING
								LastErrorNum$	= "SY_531InvalidExistCredentials.Y2"
								LastErrorMsg$	= MSG("SY_531InvalidExistCredentials.Y2")
							} ELSE {
								retVal			= retFAILURE
								LastErrorNum$	= ARCreditCard'LastErrorNum$
								LastErrorMsg$	= ARCreditCard'LastErrorMsg$
							}
						}
					} ELSE {
						retVal			= retFAILURE
						LastErrorNum$	= coSession'LastErrorNum$
						LastErrorMsg$	= coSession'LastErrorMsg$
					}
				} ELSE {
					retVal			= retWARNING
					LastErrorNum$	= "SY_531APSBlankCredentials.Y2"
					LastErrorMsg$	= MSG("SY_531APSBlankCredentials.Y2")
				}
			} ELSE {
				IF APS531val$ = isNO$ {
					cValidProcessingPayTypesExist	= _OBJ'CheckProcessingPaymentTypesExist()
					IF cValidProcessingPayTypesExist {
						retVal		= retWARNING
					}
				}
			}

			IF retVal {
				tmpIOL$ = "CreditCardTransTimeout," 		\
						+ "CreditCardBatchAuthTrans$," 		\
						+ "CreditCardLog$," 				\
						+ "CreditCardDisplay$,"				\
						+ "D531_APSCreditCardLog$"

				tmpIOL$ = CPL( "IOLIST " + tmpIOL$ )

				SWITCH APS531val$
					CASE isYES$,"A","B" ! #231342 - Yes, ACH, Both.
						_OBJ'GetOriginalValue("CreditCardTransTimeOut")
						_OBJ'GetOriginalValue("CreditCardBatchAuthTrans$")
						_OBJ'GetOriginalValue("D531_APSCreditCardLog$")
					BREAK

					CASE isNO$
						CreditCardTransTimeOut			= cDefaultTimeoutValue
						CreditCardBatchAuthTrans$		= isNO$
						CreditCardLog$					= isNO$
						CreditCardDisplay$				= isNO$
						D531_APSCreditCardLog$			= isNO$
					BREAK
				END SWITCH

				tmpRec$	= REC( tmpIOL$ )
				_OBJ'SetPartialRecord( tmpRec$, tmpIOL$ )
			}
		}
	} ELSE {
		retVal			= _OBJ'ValidateCreditCardEnable(FROM "SY_531APSCompany_bus_BASE",APS531val$)
	}
RETURN retVal
!

VALIDATE_C2P_API_KEY: ! #232007 - RCS 2017-12-04, refactored 2019-05-24 RCS

	! Does a "get Invoice link request" to validate the API key and connectivity to APS Click To Pay.

	c2p.companyCode$	= LCS(companyCode$)
	c2p.companyKey$		= companyKey$

	coCompany			= NEW ("SY_Company_SVC", 		coSession)
	coCompany'FIND(c2p.companyKey$)

	_obj'GetValue("D531_C2PAPIKey$",	c2p.APIKey$)
	_obj'GetValue("D531_C2PCurrency$",	c2p.Currency$)

	coDocument			= NEW ("SY_531APSDocument_SVC", coSession)
	coRequest			= NEW ("SY_531APSRequest",		coSession)

	c2p.ARDivisionNo$	= "00"
	c2p.CustomerNo$		= "C2PTEST"
	c2p.InvoiceNo$		= "0000001"
	c2p.InvoiceType$	= "IN"

	! api/invoices/getCode
	documentCode$		= "IG###Q"
	memoryFH			= coRequest'CreateMemoryFile()
	coRequest'c2p.APIKEY$	= c2p.APIKey$
	coDocument'FIND(documentCode$)
	coDocument'GetValue("documentPath$", documentPath$)

	coRequest'LoadHeader()
 
 	retVal				= coRequest'SendRequest(documentCode$, documentPath$, memoryFH)
 	
 	coRequest'LoadResponse()
 
	SWITCH retVal
		CASE retSUCCESS ! was able to send the request and get an answer
			BREAK

		CASE retWARNING ! request connected at an insecure level
			coRequest'TlsWarning()
			BREAK

		DEFAULT
			! failed to send transaction!
			coRequest'DisplayError(c2p.errorMessage$)
			retVal		= retFAILURE
			BREAK
	END SWITCH
	IF c2p.statusClassCode <> 1 {
		! failed transaction
		coSession'UI'MessageBox$($$,"Invalid or missing ClickToPay key!"+SEP+				\
									"Please verify your APS ClickToPay key."+SEP+			\
									"APS ClickToPay error message: "+c2p.ErrorMessage$,		\
									"title=APS ClickToPay,style=OK,icon=S,beep")
			retVal		= retFAILURE
	}

	DROP OBJECT coRequest,	ERR=*PROCEED;	coRequest	= 0
	DROP OBJECT coDocument,	ERR=*PROCEED;	coDocument	= 0
	DROP OBJECT coCompany,	ERR=*PROCEED;	coCompany	= 0

RETURN retVal
!

VALIDATE_LEVEL_III_PROCESSING:
ENTER value$

	IF value$<>"Y" {
		_OBJ'SetValueNoValidate("D531APSSummaryCommodityCode$",$$)
		_OBJ'SetValueNoValidate("D531APSItemCommodityCode$",$$)
		_OBJ'SetValueNoValidate("D531ShipFromPostal$",$$)
	}

RETURN retSUCCESS
!

VALIDATE_PAYMENT_TYPE: ! #232007 - 2018-02-22 RCS

ENTER (value$),cPaymentTypeMethod$

	retVal				= retSUCCESS
	pt_found			= 0

	tmpAR_PaymentTypeFH	= coSession'OpenTable("AR_PaymentType", pthOTHERCOMPANY$ + CompanyCode$)

	READ (tmpAR_PaymentTypeFH,rec=PT$,key=value$,dom=*next); pt_found=1

	if pt_found {
		cPaymentTypeMethod$	= pt.PaymentMethod$
	} else {
		retVal = retFAILURE
		LastErrorNum$		= "CI_Invalid"
		LastErrorMsg$		= MSG("CI_Invalid", "payment type")
	}

	if tmpAR_PaymentTypeFH {
		CLOSE (tmpAR_PaymentTypeFH,err=*next)
		tmpAR_PaymentTypeFH	= 0
	}

RETURN retVal
!

WRITE:

	APSC2PEnabled				= D531_C2PEnabled$="Y"
	tmpCompanyKey$          	= CompanyKey$

	IF APSActivated AND POS(CreditCardEnable$ = "YB") AND D531APSLevelIIIProcessing$="Y" { ! #231342 - Yes or Both for credit cards only.
		IF NUL(D531APSSummaryCommodityCode$)	\ 
			OR NUL(D531APSItemCommodityCode$) 	\
			OR NUL(D531ShipFromPostal$) {	
				retVal			= retFAILURE
				LastErrorNum$	= "SY_531APSLevelIIIcommodity"
				LastErrorMsg$	= MSG("SY_531APSLevelIIIcommodity")
				RETURN retVal
		}
	}
	! Level III are required for C2P, so check that they are turned on.
	IF D531_C2PEnabled$="Y" { ! #232007 - needed for C2P
		IF NUL(D531APSSummaryCommodityCode$)	\ 
			OR NUL(D531APSItemCommodityCode$)	\
			OR NUL(D531ShipFromPostal$)			\
			OR D531APSLevelIIIProcessing$<>"Y"	{
				retVal			= retFAILURE
				LastErrorNum$	= "SY_531APSLevelIIIcommodity"
				LastErrorMsg$	= MSG("SY_531APSLevelIIIcommodity")
				RETURN retVal
		}
	}

	IF APSActivated {

		retVal			= retSUCCESS

		IF NUL(CompanyKey$) {
			CompanyKey$	= coSession'GetNextSurrogate$("SY_Company")
			IF NUL(CompanyKey$) { 
				CompanyKey$				= coSession'AddSurrogate$("SY_Company", "CompanyKey$")
			}
		}

		tmpCompanyKey$					= CompanyKey$
		tmpCompanyCode$					= CompanyCode$
		tmpPrefsDefaultCompany$			= PrefsDefaultCompany$
		tmpAlternateDirectory$			= AlternateDirectory$
		tmpAlternatePayrollDirectory$	= AlternatePayrollDirectory$
		newCompany						= (EditState=edtNEW)
		cCreditCardLog$					= CreditCardLog$

		! Ensure that color is not black when using Frame or Both.
		xBgChk			= EVN("_OBJ'ValidateBackGroundColor()",ERR=*NEXT) ! V530

		IF CreditCardEnable$ = isNO$				\
			AND POS(cOrigCreditCardEnable$ = "YAB")	\
			AND cValidProcessingPayTypesExist { ! # 231342 - Yes, ACH, Both

			IF _OBJ'ARCreditCard {

				IF retVal {
					CLOSE(cAR_PaymentTypeFH, ERR = *NEXT)
					cAR_PaymentTypeFH	= 0
					retVal				= ARCreditCard'LockConvFiles(CompanyCode$, isTRUE)
				}

				IF NOT(retVal) {
					LastErrorNum$		= ARCreditCard'LastErrorNum$
					LastErrorMsg$		= ARCreditCard'LastErrorMsg$
				}
			} ELSE {
				retVal					= retFAILURE
				LastErrorNum$			= coSession'LastErrorNum$
				LastErrorMsg$			= coSession'LastErrorMsg$
			}
		}

		IF POS(CreditCardEnable$ = "YAB") AND cOrigCreditCardEnable$ = isNO$ { ! #231342 - Yes, ACH, Both

			IF _OBJ'ARCreditCard {
				retVal					= ARCreditCard'TestInternetConnection()

				IF retVal {
					CLOSE(cAR_PaymentTypeFH, ERR = *NEXT)
					cAR_PaymentTypeFH	= 0
					retVal				= ARCreditCard'LockConvFiles(CompanyCode$, isTRUE)
				}

				IF NOT(retVal) {
					LastErrorNum$		= ARCreditCard'LastErrorNum$
					LastErrorMsg$		= ARCreditCard'LastErrorMsg$
				}

			} ELSE {
				retVal					= retFAILURE
				LastErrorNum$			= coSession'LastErrorNum$
				LastErrorMsg$			= coSession'LastErrorMsg$
			}
		}

		IF retVal {
			! C2P Change
			D531_C2PCurrency$			= tbl(nul(D531_C2PCurrency$),D531_C2PCurrency$,"USD")					! currency
			D531_C2POptOut$				= tbl(nul(D531_C2POptOut$),D531_C2POptOut$,"N")							! Opt in/Opt out
			D531_APSCreditCardLog$		= tbl(nul(D531_APSCreditCardLog$),D531_APSCreditCardLog$,"N")			! logging
			D531APSLevelIIIProcessing$	= tbl(nul(D531APSLevelIIIProcessing$),D531APSLevelIIIProcessing$,"N")	! Level III
			D531_C2PEnabled$			= tbl(nul(D531_C2PEnabled$),D531_C2PEnabled$,"N")						! C2P enable

			retVal						= _OBJ'Write(FROM "SY_Maint")

			IF retVal {

				tmp						= _OBJ'CompanyRecordCTL(tmpCompanyCode$)

				IF tmpPrefsDefaultCompany$=isYES$ { 
					retVal				= _OBJ'SetDefaultCompanyForPrefs(tmpCompanyKey$)
				}

				IF newCompany {
					retDir				= coSession'FileObj'ValidateDirectory(TBL(NUL(tmpAlternateDirectory$), tmpAlternateDirectory$, coSession'PathData$) +	\
																				coSession'RootPrefix$ + tmpCompanyCode$, isTRUE)
					IF tmpAlternatePayrollDirectory$<>tmpAlternatePayrollDirectory$ {
						retDir			= coSession'FileObj'ValidateDirectory(tmpAlternatePayrollDirectory$ + coSession'RootPrefix$ + tmpCompanyCode$, isTRUE)
					}

					IF coSession'SQL { 
						retDb			= coSession'FileObj'ValidateDatabase(tmpCompanyCode$, isTRUE)
					}
				}
				CompanyKey$				= tbl(nul(CompanyKey$),CompanyKey$,tmpCompanyKey$)
				WRITE (cD531_APSCompanyFH)
				C2PDefault				= isFALSE
			}
		}

	} ELSE {
		! C2P Change
		D531_C2PCurrency$				= tbl(nul(D531_C2PCurrency$),D531_C2PCurrency$,"USD")					! currency
		D531_C2POptOut$					= tbl(nul(D531_C2POptOut$),D531_C2POptOut$,"N")							! Opt in/Opt out
		D531_APSCreditCardLog$			= tbl(nul(D531_APSCreditCardLog$),D531_APSCreditCardLog$,"N")			! logging
		D531APSLevelIIIProcessing$		= tbl(nul(D531APSLevelIIIProcessing$),D531APSLevelIIIProcessing$,"N")	! Level III
		D531_C2PEnabled$				= tbl(nul(D531_C2PEnabled$),D531_C2PEnabled$,"N")						! C2P enable

		retVal							= _OBJ'WRITE (FROM "SY_531APSCompany_bus_BASE")
		if retVal {
			CompanyKey$					= tbl(nul(CompanyKey$),CompanyKey$,tmpCompanyKey$)
			WRITE (cD531_APSCompanyFH)
			C2PDefault					= isFALSE
		}
	}

RETURN retVal
!
