! $Id: SY_531APSTerminal_ui.pvc $
! Terminal Code UI Object
! Copyright 2019 (C) by Accounting Systems Inc. (ASI) All rights reserved.
! #236076 - 2019-02-28 RCS
!
DEF CLASS "SY_531APSTerminal_ui" CREATE REQUIRED DELETE REQUIRED 
	! Inherits from the following class(es)
	LIKE "SY_MaintUI"
	LIKE "SY_Password"
	
	! Public Properties
	
	! Local/Private Properties
	LOCAL cAPSActivated
	LOCAL cAppIndentifier$		= "APSEMV"
	LOCAL cListingClass$		= "SY_531APSEmvTerminalListing_RPT"
	LOCAL CompanyCode$
	LOCAL cOrigPaymentDesc$
	LOCAL cOrigPaymentType$
	LOCAL cStandbyMessage$		= "APS Payments"
	LOCAL cTerminalCode$
	LOCAL cTerminalKey$
	! ** Local property storing the dictionary length of the SY_531APSEmvTerminal TerminalCode column.
	LOCAL cTerminalCodeLen
	LOCAL CR$					= $0D$
	LOCAL CrLf$					= $0D0A$
	LOCAL Tab$					= $09$
	
	
	! file handles...
	LOCAL cTerminalFh
	LOCAL AR_PaymentTypeFH
	
	! object handles
	LOCAL coAPSActivation
	
	! Public Functions (Methods)
	
	! Local/Private Functions (Methods)
	FUNCTION LOCAL BT_Accept()										BT_ACCEPT
	FUNCTION LOCAL BT_Activate()									BT_ACTIVATE
	FUNCTION LOCAL BT_Cancel()										BT_CANCEL
	FUNCTION LOCAL BT_CancelClose()									BT_CANCEL_CLOSE
	FUNCTION LOCAL BT_DeActivate()									BT_DEACTIVATE
	FUNCTION LOCAL BT_GetWorkstationName()							BT_GET_WORKSTATION_NAME
	FUNCTION LOCAL BT_Remove()										BT_REMOVE
	FUNCTION LOCAL BT_SubmitClose()									BT_SUBMIT_CLOSE
	
	FUNCTION local ChangePaymentDevice()							CHANGE_PAYMENT_DEVICE
	FUNCTION local ChangePaymentType()								CHANGE_PAYMENT_TYPE
	FUNCTION LOCAL ChangeTerminalCode()								CHANGE_TERMINAL_CODE
	FUNCTION LOCAL ChangeWorkstationID()							CHANGE_WORKSTATION_ID
	FUNCTION LOCAL CheckButtons()									CHECK_BUTTONS
	FUNCTION LOCAL CheckForEnable()									CHECK_FOR_ENABLE
	
	FUNCTION LOCAL ImpliedWrite()									IMPLIED_WRITE
	
	FUNCTION LOCAL OnExit()											ON_EXIT
	
	FUNCTION LOCAL PostLoad()										POST_LOAD
	FUNCTION LOCAL PostReadRec()									POST_READ_REC
	FUNCTION LOCAL PreLoad()										PRE_LOAD
	
	! Elements Defined Elsewhere, but Referenced Locally
	LOCAL coSession

END DEF
!

ON_CREATE:
ENTER coSession
	! check for activation
	coAPSActivation		= NEW("SY_531APSActivation_bus",coSession,ERR=*NEXT)
	IF coAPSActivation {
		cAPSActivated	= coAPSActivation'CheckAPSActivation ()
		DROP OBJECT coAPSActivation
		coAPSActivation	= 0
	}
	if not(cAPSActivated) {
		coSession'UI'MessageBox$("","APS Payments is not activated for this company.","Style=OK,Title=APS Payments,Icon=!")
		bye
	}

	CompanyCode$		= coSession'CompanyCode$
	SCREEN_LIB$			= "SY_531APSTerminal.M4L"
	SCREEN_ID$			= "DMain"
	coBusiness=_OBJ'InitBusinessObject("MAIN","SY_531APSTerminal_BUS",$$,isTRUE,isTRUE,isTRUE)
	IF NOT(coBusiness) {
		EXIT errOBJECT
	}

	retVal				= coBusiness'CheckProcessingPaymentTypesExist()
	if not(retVal) {
		coSession'UI'MessageBox$("","No EMV payments set up for this company.\Please set up at least one EMV payment type.","Style=OK,Title=APS Payments,Icon=!")
		bye
	}
	cTerminalFh			= _OBJ'OpenTable("SY_531APSEmvTerminal",pthSYSTEM$,ERR=*NEXT)
	AR_PaymentTypeFH	= _OBJ'OpenTable("AR_PaymentType", pthCOMPANY$)
	
	! set index for SY_531APSEmvTerminal to terminalcode
	READ (cTerminalFh,KNO=cPrimaryIndex$,KEY=$$,DOM=*NEXT)
	
RETURN
!

ON_DELETE:
	
	! file channels
	CLOSE (cTerminalFh,			ERR=*PROCEED);	cTerminalFh			= 0
	CLOSE (AR_PaymentTypeFH,	ERR=*PROCEED);	cAR_PaymentTypeFH	= 0
	
	! objects
RETURN 
!

ON_EXIT:
	retVal				=_OBJ'OnExit(FROM "SY_MaintUI")
RETURN retVal
!

BT_ACCEPT:

	retVal				= retSUCCESS
	tmpRetVal	= coBusiness'CheckDuplicateWorkstationID(WorkstationID$, dup$)
	if tmpRetVal {
		coSession'UI'MessageBox$("SY_531APSDuplicateWorkstation", MSG("SY_531APSDuplicateWorkstation", dup$))
		_obj'BT_Cancel()
		retVal			= retFAILURE		
		RETURN retVal
	}
	retVal				=_OBJ'BT_Accept(FROM "SY_MaintUI")

RETURN retVal
!

BT_ACTIVATE:
	! Save off the Terminal code and name in case a write occurs.
	tmpTerminalCode$ = cTerminalCode$
	! tmpTerminalName$ = TerminalName$

	retVal			= coBusiness'CheckProcessingPaymentTypesExist()
	if not(retVal) {
		coSession'UI'MessageBox$("SY_531APSEmvPayTypeMustExist")
		RETURN retFAILURE
	}
	! Determine if record needs to be saved.
	! Don't want to use accept here, clears everything, need to retain data.
	IF coBusiness'EditState = edtNEW {
		! New Terminal record must be saved before activation can occur.
		answer$		= coSession'UI'MessageBox$("SY_NewCompActivation.Y",MSG("SY_NewCompActivation.Y"))
		IF answer$	= msgYES$ {
			retVal	= coBusiness'Write()
			IF NOT(retVal) {
				coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
				tmpRetVal		= _OBJ'SetFocusFailedID()
				RETURN retVal
			}
		} ELSE {
			RETURN retSUCCESS
		}
	}
	IF coBusiness'EditState		= edtEXISTS {
		! Existing record must be saved in case Terminal Level changes.
		IF coBusiness'RecordChanged {
			answer$		= coSession'UI'MessageBox$("CI_SaveChanges.N")
			IF answer$	= msgCANCEL$ {
				RETURN retSUCCESS
			}
			IF answer$	= msgYES$ {
				retVal	= coBusiness'Write()
				IF NOT(retVal) {
					coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
					tmpRetVal	= _OBJ'SetFocusFailedID()
					RETURN retVal
				}
			}
			IF answer$	= msgNO$ {
				! Recall the original record and update the UI.
				retVal	= _OBJ'KeyChange(tmpTerminalCode$,isTRUE)
				PREINPUT NEXT BT_Activate.ctl
				RETURN retSUCCESS
			}
		}
	}
	
	retVal			= coBusiness'FIND(cTerminalCode$)
	IF retVal {
		! resets the current terminal for further edits.
		coBusiness'GetValue("TerminalKey$",TerminalKey$)
		_OBJ'PostReadRec()
	}

	coRegister		= NEW("AR_531ApsCreditCardSubmit_ui",coSession)
	retVal			= coRegister'GetRegistrationForm(ML_RegistrationCode$)
	drop object coRegister
	coRegister		= 0
	IF ML_RegistrationCode$ = "CANCEL" {
		ML_RegistrationCode$	= isNULL$
		retVal		= retFAILURE
	}

	if not(retVal) {
		RETURN retVal
	}

	! Do activation.

	coEMV			= NEW("SY_531APSEmvRequest",coSession)
	retVal			= coEMV'DeviceRegister(D531APSApiKey$,ML_RegistrationCode$,StandbyMessage$,DeviceLicense$,DeviceID$,RegistrationStatus$)
	drop object coEMV
	coEMV			= 0

	if retVal {
		tmpVal		= coBusiness'SetValue("DeviceLicense$",DeviceLicense$)
		tmpVal		= coBusiness'SetValue("RegistrationStatus$",RegistrationStatus$)
		retVal		= coBusiness'Write()
		IF NOT(retVal) {
			coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
			tmpRetVal	= _OBJ'SetFocusFailedID()
			RETURN retVal
		}
	}

 
	retVal			= coBusiness'FIND(TerminalCode$)
	IF retVal {
		! resets the current terminal for further edits.
		coBusiness'GetValue("TerminalKey$",TerminalKey$)
		_OBJ'PostReadRec()
	}
RETURN retSUCCESS
!

BT_CANCEL:
	retVal			= retSUCCESS
	! clear vars
	RegistrationStatus$	= isNULL$
	retVal			= _OBJ'BT_Cancel(FROM "SY_MaintUI")
	retVal			= _OBJ'SetControlState("Main.grp$",ctlDISABLE)

 
RETURN retVal
!

BT_CANCEL_CLOSE:
	
	Arg_1$			= isNULL$
	Cmd_Str$		= "End"
	
RETURN retSUCCESS
!

BT_DEACTIVATE:
	! Save off the Terminal code and name in case a write occurs.
	tmpTerminalCode$ = cTerminalCode$
	! tmpTerminalName$ = TerminalName$

	retVal			= coBusiness'CheckProcessingPaymentTypesExist()
	if not(retVal) {
		coSession'UI'MessageBox$("SY_531APSEmvPayTypeMustExist")
		RETURN retFAILURE
	}
	! Determine if record needs to be saved.
	! Don't want to use accept here, clears everything, need to retain data.
	IF coBusiness'EditState = edtNEW {
		! New Terminal record must be saved before activation can occur.
		answer$		= coSession'UI'MessageBox$("SY_NewCompActivation.Y",MSG("SY_NewCompActivation.Y"))
		IF answer$	= msgYES$ {
			retVal	= coBusiness'Write()
			IF NOT(retVal) {
				coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
				tmpRetVal		= _OBJ'SetFocusFailedID()
				RETURN retVal
			}
		} ELSE {
			RETURN retSUCCESS
		}
	}
	IF coBusiness'EditState		= edtEXISTS {
		! Existing record must be saved in case Terminal Level changes.
		IF coBusiness'RecordChanged {
			answer$		= coSession'UI'MessageBox$("CI_SaveChanges.N")
			IF answer$	= msgCANCEL$ {
				RETURN retSUCCESS
			}
			IF answer$	= msgYES$ {
				retVal	= coBusiness'Write()
				IF NOT(retVal) {
					coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
					tmpRetVal	= _OBJ'SetFocusFailedID()
					RETURN retVal
				}
			}
			IF answer$	= msgNO$ {
				! Recall the original record and update the UI.
				retVal	= _OBJ'KeyChange(tmpTerminalCode$,isTRUE)
				PREINPUT NEXT BT_Activate.ctl
				RETURN retSUCCESS
			}
		}
	}
	
	retVal			= coBusiness'FIND(cTerminalCode$)
	IF retVal {
		! resets the current terminal for further edits.
		coBusiness'GetValue("TerminalKey$",TerminalKey$)
		_OBJ'PostReadRec()
	}

	! Do deactivation.
	coEMV			= NEW("SY_531APSEmvRequest",coSession)
	retVal			= coEMV'DeviceUnRegister(D531APSApiKey$,DeviceLicense$,DeviceID$,RegistrationStatus$)
	drop object coEMV
	coEMV			= 0

	if retVal {
		tmpVal		= coBusiness'SetValue("DeviceLicense$",isNULL$)
		tmpVal		= coBusiness'SetValue("RegistrationStatus$",RegistrationStatus$)
		retVal		= coBusiness'Write()
		IF NOT(retVal) {
			coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
			tmpRetVal	= _OBJ'SetFocusFailedID()
			RETURN retVal
		}
	}

 
	retVal			= coBusiness'FIND(TerminalCode$)
	IF retVal {
		! resets the current terminal for further edits.
		coBusiness'GetValue("TerminalKey$",TerminalKey$)
		_OBJ'PostReadRec()
	}
RETURN retSUCCESS
!

BT_GET_WORKSTATION_NAME:

	cWorkstationID$	= coSession'WorkstationName$
	retVal			= coBusiness'SetValue("WorkstationID$",cWorkstationID$)
	
RETURN retVal
!

BT_REMOVE:
	coSession'UI'MessageBox$("SY_RemoveWarning",MSG("SY_RemoveWarning"))
	tmpTerminalCode$	= TerminalCode$
	tmpTerminalName$	= TerminalName$
	tmpTerminalKey$		= TerminalKey$
	IF coBusiness'EditState <> edtNONE {
		IF coBusiness'EditState = edtNEW {
			! "New Terminal record must be saved before Remove can occur."
			answer$	= coSession'UI'MessageBox$("SY_CompRemoveData.Y",MSG("SY_CompRemoveData.Y"))
			IF UCS(answer$)	= msgNO$ {
				RETURN retSUCCESS
			} ELSE {
				! Don't want to use accept here, clears everything, need to retain data.
				retVal		= coBusiness'Write()
				goFindEdit	= edtNEW
			}
		}
	}
	
	! The following code reset the current Terminal for further edits.
	TerminalFH		= _OBJ'OpenTable("SY_531APSEmvTerminal",pthSYSTEM$)
	IF TerminalFH {
		READ (TerminalFH,KEY=tmpTerminalKey$,REC=tmp$,ERR=*NEXT)
		IF NUL(tmp.TerminalKey$) {
			retVal	= coBusiness'FIND(TerminalCode$)
		}
		CLOSE (TerminalFH,ERR=*NEXT)
	}
	retVal			= coBusiness'GetValue("TerminalKey$",TerminalKey$)
	IF NUL(TerminalKey$) {
		retVal		= _OBJ'BT_Cancel()
	} else {
		retVal		= _OBJ'PostReadRec()
	}
RETURN retSUCCESS
!

BT_SUBMIT_CLOSE:

	Arg_1$			= ML_RegistrationCode$
	Cmd_Str$		= "End"
	
RETURN retSUCCESS
!

CHANGE_PAYMENT_DEVICE:
	
	retval			= retSUCCESS
	
	SWITCH PaymentDevice$
		CASE "1"
			Model$	= "Ingenico-iPP320-RBA"
			BREAK
		CASE "2"
			Model$	= "Ingenico-iSC250-RBA"
			BREAK
		CASE "3"
			Model$	= "VeriFone-Mx915-XPI"
			BREAK
		CASE "4"
			Model$	= "VeriFone-Vx820-XPI"
			BREAK
		CASE "5"
			Model$	= "Ingenico-iPP350-RBA"
			BREAK
		CASE "6"
			Model$	= "VeriFone-Mx925-XPI"
			BREAK
		DEFAULT
			Model$	= isNULL$
			retVal	= retFAILURE
			BREAK
	END SWITCH
	
	if retVal {
		coBusiness'SetValue("Model$",Model$)
		coBusiness'SetValue("PaymentDevice$",PaymentDevice$)
	} else {
		coSession'UI'MessageBox$("","Invalid Model Selected.\Please select from the four models available.")
		coBusiness'SetValue("Model$",isNULL$)
	}
	
RETURN retVal
!

CHANGE_PAYMENT_TYPE:

	value$			= PaymentType$
	retVal			= coBusiness'GetPaymentType(Value$,cPaymentTypeMethod$,PaymentDesc$,D531APSUseEmvDevice$)
	if not(retval) or not(D531APSUseEmvDevice$	= isYES$){
		coSession'UI'MessageBox$("","Invalid Payment Type Selected.\Please select an EMV enabled payment type.")
		PaymentType$	= cOrigPaymentType$
		Value$			= cOrigPaymentType$
		PaymentDesc$	= isNULL$
		coBusiness'SetValue("PaymentType$",PaymentType$)
		coBusiness'GetPaymentType(Value$,cPaymentTypeMethod$,PaymentDesc$,D531APSUseEmvDevice$)
		next_id			= PaymentType.ctl
	} ELSE {
		coBusiness'SetValue("PaymentType$",PaymentType$)
		read(AR_PaymentTypeFH,key=PaymentType$,rec=pt$)
		coBusiness'SetValue("D531APSApiKey$",pt.D531APSApiKey$)
		D531APSApiKey$	= pt.D531APSApiKey$
		PaymentDesc$	= pt.PaymentDesc$
		refresh_flg		= isTRUE
	}

RETURN retVal
!

CHANGE_TERMINAL_CODE:
	
	retVal			= _OBJ'KeyChange(TerminalCode$,isTRUE)
	IF retVal {
		retVal		= _OBJ'CheckButtons()
		if nul(PaymentDevice$) {
			PaymentDevice$		= "1"
			_obj'ChangePaymentDevice()
		}
	} ELSE {
		_OBJ'BT_Cancel()
	}
	
RETURN retVal
!

CHANGE_WORKSTATION_ID:
	
	if not(nul(WorkstationID$)) {
		retVal		= retSUCCESS
	}
	if nul(WorkstationID$) and coBusiness'EditState = edtNEW {
		_obj'BT_GetWorkstationName()
		retVal		= retSUCCESS
	}
	if nul(WorkstationID$) and coBusiness'EditState <> edtNEW {
		coSession'UI'MessageBox$("","Workstation Name must be entered.\Click on the terminal button to load if working from that workstation.")
		retVal		= retFAILURE
	}
	
RETURN retVal
!

CHECK_BUTTONS:
RETURN retSUCCESS
!

CHECK_FOR_ENABLE:
	
	if nul(TerminalKey$) {
		RegistrationStatus$	= isNULL$
		refresh_flg			= isTRUE
	}
	IF UCS(SCREEN_ID$)	= "DREGISTER" {
		! Append Company and Date to panel caption
		Enable control ML_RegistrationCode.ctl
	}

	

RETURN retSUCCESS
!

IMPLIED_WRITE:
	retVal				= retSUCCESS
	curKey$				= coBusiness'GetKey$()
	retVal				= coBusiness'Write()
	IF retVal			= retFAILURE {
		coSession'UI'MessageBox$(coBusiness'LastErrorNum$,coBusiness'LastErrorMsg$)
	} ELSE {
		coBusiness'SetKey(curKey$)
	}
RETURN retVal
! 

POST_LOAD:
	IF UCS(SCREEN_ID$)	= "DREGISTER" {
		! Append Company and Date to panel caption
		retVal			= _OBJ'AppendTitleBar()
	}
	_OBJ'PostLoad(FROM "sy_MaintUI")
	_obj'CheckForEnable()
RETURN retSUCCESS
!

POST_READ_REC:

	if coBusiness'EditState = EdtNew {
		_obj'BT_GetWorkstationName()
		coBusiness'SetValue("StandbyMessage$",cStandbyMessage$)
		termNo		= coSession'TerminalNo
		coBusiness'SetValue("TerminalPosID$","Till"+str(termNo))
		coBusiness'SetValue("ApplicationIdentifer$",cAppIndentifier$)
		if nul(PaymentDevice$) {
			PaymentDevice$	= "1"
			SWITCH PaymentDevice$
				CASE "1"
					Model$		= "Ingenico-iPP320-RBA"
					BREAK
				CASE "2"
					Model$		= "Ingenico-iSC250-RBA"
					BREAK
				CASE "3"
					Model$		= "VeriFone-Mx915-XPI"
					BREAK
				CASE "4"
					Model$		= "VeriFone-Vx820-XPI"
					BREAK
				CASE "5"
					Model$		= "Ingenico-iPP350-RBA"
					BREAK
				CASE "6"
					Model$		= "VeriFone-Mx925-XPI"
					BREAK
				DEFAULT
					Model$		= "Ingenico-iPP320-RBA"
					BREAK
			END SWITCH
			coBusiness'SetValue("Model$",Model$)
		}
	}
	if nul(ApplicationIdentifer$) {
		coBusiness'SetValue("ApplicationIdentifer$",cAppIndentifier$)
	}
	if nul(DeviceLicense$) {
		RegistrationStatus$	= "Deregistered"
		coBusiness'SetValue("RegistrationStatus$",RegistrationStatus$)
	} else {
		RegistrationStatus$	= "Registered"
		coBusiness'SetValue("RegistrationStatus$",RegistrationStatus$)
	}

	cOrigPaymentType$	= PaymentType$
	cOrigPaymentDesc$	= PaymentDesc$
	cTerminalKey$		= TerminalKey$
	cTerminalCode$		= TerminalCode$
	_obj'CheckForEnable()
	
RETURN retVal
!
PRE_LOAD:
	IF UCS(SCREEN_ID$)	= "DREGISTER" {
		ML_RegistrationCode$	= Arg_1$
		! Append Company and Date to panel caption
		retVal				= _OBJ'AppendTitleBar()
	}

RETURN retSUCCESS
!

GET_EMV_REGISTRATION:
	oCreditCardSubmit	= NEW("AR_531APSCreditCardSubmit_ui",coSession)
	if cUseEmvDevice$	= isYES$ {
		retVal			= oCreditCardSubmit'GetEmvForm(response.URL$, UserAction$)
	} ELSE {
		if cFromCustMaint or not(Amount) {
			retVal		= oCreditCardSubmit'GetVaultForm(response.URL$, UserAction$)
		} else {
			retVal		= oCreditCardSubmit'GetHostedForm(response.URL$, UserAction$)
		}
	}
	DROP OBJECT oCreditCardSubmit
	oCreditCardSubmit	= 0

RETURN retSUCCESS
!

