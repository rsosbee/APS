! $Id: SY_531APSTerminal_bus.pvc $
! Terminal Code bus Object
! Copyright 2019 (C) by Accounting Systems Inc. (ASI) All rights reserved.
! #236076 - 2019-02-28 RCS
!

DEF CLASS "SY_531APSTerminal_bus" CREATE REQUIRED DELETE REQUIRED 
	! Inherits from the following class(es)
	LIKE "SY_Maint"
	LIKE "SY_Password"
	
	! Public Properties
	PROPERTY CCRegistered SET ERR
	! ** Handle to AR_CreditCard, also accessible from ui
	PROPERTY ARCreditCard GET AR_CREDITCARD SET ERR
	
	! Local/Private Properties
	LOCAL cARCreditCard					= isFALSE
	LOCAL cCmd$
	LOCAL CompanyCode$
	LOCAL cDefaultTimeoutValue			= 45000
	LOCAL cIsSysDB						= isTRUE ! <1=MAS_SYSTEM, 0=MAS_XXX>
	LOCAL cMainTable$					= "SY_531APSEmvTerminal"
	LOCAL cPrimaryIndex$				= "kTerminalCode"
	LOCAL cTerminalCodeLen
	LOCAL cInvalidTerminalCodeChars$	= " !#$%&'()+,-.;=@[]^_`{}~"+":\/|><*?"+QUO
	LOCAL wdx$							= %sys_wdx$
	
	! file handles
	LOCAL cAR_PaymentTypeFH
	LOCAL cTerminalFh
	
	! object handles
	LOCAL coPvxUtil
	LOCAL coARPaymentType
	
	! Public Functions (Methods)
	! ** Check AR_PaymentType records for Credit Card with valid EMV connections
	! ** @returns retSUCCESS if there are any payment methods with valid EMV connections
	FUNCTION CheckProcessingPaymentTypesExist()						CHECK_PROCESSING_PAYMENT_TYPES_EXIST
	FUNCTION CheckDuplicateWorkstationID(val$, dup$)				CHECK_DUPLICATE_WORKSTATION_ID
	FUNCTION CopyFile(SrcFile$,DstFile$)							COPY_FILE
	FUNCTION ConfirmDelete()										CONFIRM_DELETE
	FUNCTION CreateWorkstationDirectory(TerminalCode$)				CREATE_WORKSTATION_DIRECTORY
	FUNCTION Delete(key$)											DELETE_REC
	FUNCTION DirectoryCheck(path$,pathFULL$)						DIRECTORY_CHECK
	FUNCTION GetDirectoryChain(RootDir$,SubDirChain$,Levels)		GET_DIRECTORY_CHAIN
	FUNCTION GetOriginalValue(tmpcolumn$)							GET_ORIGINAL_VALUE
	FUNCTION GetPaymentType(value$,PayType$,PayDesc$,UseEMV$)		GET_PAYMENT_TYPE
	FUNCTION RunDll()												RUN_DLL
	FUNCTION SetKey(key$)											SET_KEY
	FUNCTION ValidateBaudRate(val$)									VALIDATE_BAUDRATE
	FUNCTION ValidateComPortNumber(val)								VALIDATE_COM_PORT
	FUNCTION ValidateDataBits(val$)									VALIDATE_DATABITS
	FUNCTION ValidateDeviceID(val$)									VALIDATE_DEVICEID
	FUNCTION ValidateD531APSApiKey(val$)							VALIDATE_D531APSAPIKEY
	FUNCTION ValidateEmvEndPoint(val$)								VALIDATE_EMVENDPOINT
	FUNCTION ValidateEmvWebPort(val$)								VALIDATE_EMVWEBPORT
	FUNCTION ValidateFlowControl(val$)								VALIDATE_FLOWCONTROL
	FUNCTION ValidateParity(val$)									VALIDATE_PARITY
	FUNCTION ValidatePaymentDevice(val$)							VALIDATE_PAYMENTDEVICE
	FUNCTION ValidatePaymentType(value$,cPaymentTypeMethod$)		VALIDATE_PAYMENT_TYPE
	FUNCTION ValidatePort(val$)										VALIDATE_PORT
	FUNCTION ValidateServerPort(val$)								VALIDATE_SERVERPORT
	FUNCTION ValidateSocket(val$)									VALIDATE_SOCKET
	FUNCTION ValidateStopBits(val$)									VALIDATE_STOPBITS
	FUNCTION ValidateTerminalCode(val$)								VALIDATE_TERMINAL_CODE
	FUNCTION ValidateTerminalPosId(val$)							VALIDATE_TERMINAL_POS_ID
	FUNCTION ValidateTickInterval(val)								VALIDATE_TICKINTERVAL
	FUNCTION ValidateTimeOut(val)									VALIDATE_TIMEOUT
	FUNCTION ValidateTmsType(val$)									VALIDATE_TMSTYPE
	FUNCTION ValidateWorkstationID(val$)							VALIDATE_WORKSTATIONID
	
	FUNCTION Write()												WRITE
	
	! Local/Private Functions (Methods)
	FUNCTION LOCAL PostWriteRec()									POST_WRITE_REC
	FUNCTION LOCAL PostDeleteRec()									POST_DELETE_REC

	! ** @param key$ Key of record read from SY_Terminal file.
	! ** @returns retVal from base clase (SY_Service)
	FUNCTION LOCAL ReadRec(key$)									READ_REC
	! ** Provides functionality for setting Child Collection values
	FUNCTION LOCAL SetChildColl()									SET_CHILD_COLL
	FUNCTION LOCAL SetDefaults()									SET_DEFAULTS
	
	! Elements Defined Elsewhere, but Referenced Locally
	
END DEF
!
ON_CREATE:
	! check for activation
	coAPSActivation		= NEW("SY_531APSActivation_bus",coSession,ERR=*NEXT)
	IF coAPSActivation {
		cAPSActivated	= coAPSActivation'CheckAPSActivation ()
		DROP OBJECT coAPSActivation,ERR=*NEXT
		coAPSActivation	= 0
	}
	if not(cAPSActivated) {
		LastErrorNum$	= "SY_531APSCCNotEnabled"
		LastErrorMsg$	= MSG("SY_531APSCCNotEnabled")
		EXIT 200
	}
	cTerminalFh			= _OBJ'OpenTable("SY_531APSEmvTerminal",pthSYSTEM$,ERR=*NEXT)
	cAR_PaymentTypeFH	= _OBJ'OpenTable("AR_PaymentType", pthCOMPANY$)
	
	! set index for sy_terminal to terminalcode
	READ (cTerminalFh,KNO=cPrimaryIndex$,KEY=$$,DOM=*NEXT)
	cTerminalCodeLen	= coSession'FileObj'GetColumnInfo("SY_531APSEmvTerminal","TerminalCode")'Length
	
	CompanyCode$		= coSession'CompanyCode$
	coPvxUtil			= NEW("*OBJ/pvx_utility")
RETURN 
!

ON_DELETE:
	! file channels
	CLOSE (cTerminalFh,			ERR=*PROCEED);	cTerminalFh			= 0
	CLOSE (cAR_PaymentTypeFH,	ERR=*PROCEED);	cAR_PaymentTypeFH	= 0
	
	! objects
	DROP OBJECT ARCreditCard,	ERR=*PROCEED;	ARCreditCard		= 0,cARCreditCard	= 0
	DROP OBJECT coPvxUtil,		ERR=*PROCEED;	coPvxUtil			= 0
RETURN 
!

AR_CREDITCARD:
	IF NOT(ARCreditCard) {
		ARCreditCard	= NEW("AR_CreditCard",coSession,ERR=*NEXT)
		cARCreditCard	= ARCreditCard
	}
RETURN ARCreditCard
!

CHECK_PROCESSING_PAYMENT_TYPES_EXIST:

	retVal				= retFAILURE
	PayMethod$			= "R"
	IF coSession'IsSetup("A/R",CompanyCode$) {
		IF NOT(cAR_PaymentTypeFH) {
			cAR_PaymentTypeFH	= _OBJ'OpenTable("AR_PaymentType","COMPANY")
		}
		SELECT *,REC=pay$ FROM cAR_PaymentTypeFH BEGIN $$	\ 
			WHERE POS(pay.PaymentMethod$=payMethod$)		\
				AND pay.CreditCardSetupTested$	= isYES$	\
				AND pay.D531APSUseEmvDevice$	= isYES$
			retVal		= retSUCCESS
			BREAK
		NEXT RECORD
	}
RETURN retVal
!

CHECK_DUPLICATE_WORKSTATION_ID:
ENTER val$,dup$

	retVal				= retFAILURE
	select *,rec=chk$ from cTerminalFh,kno="kWorkstationID" begin val$ end val$+$FE$
		if chk.TerminalKey$	<> TerminalKey$ {
			retVal			= retSUCCESS
			dup$			= chk.TerminalCode$
			BREAK
		}
	next record
RETURN retVal
!

CONFIRM_DELETE:
	retVal				= retSUCCESS
RETURN retVal
!

COPY_FILE:
ENTER SrcFile$,DstFile$
	cCopyOk				= isFALSE
	coPvxUtil'CopyFile(SrcFile$,DstFile$,isFALSE,ERR=*NEXT);	cCopyOk	= isTRUE
	retVal				= cCopyOk
	
RETURN retval


CREATE_WORKSTATION_DIRECTORY:
ENTER (TerminalCode$)
	! 1. check to see if the EMV directory exists on the workstation
	! 2. silent copy of APSEMV installer to the root ASI directory on the workstation.

	retVal				= retSUCCESS
 	isCS				= coSession'CS
 	isTS				= coSession'TerminalServer
 	cInstaller$			= "ApsEmvClientInstaller.exe"
 	CALL coSession'Wdx$+"*windx.utl;get_val", "HWD", pthClient$
	pthClient$			+= TBL(MID(pthClient$,-1)=DLM, DLM, $$)
	pthClientAsi$		= MID(pthClient$, 1, POS("\MAS90\HOME\"=UCS(pthClient$),-1)) + "MAS90\ASI\"
	pthClientSy$		= MID(pthClient$, 1, POS("\MAS90\HOME\"=UCS(pthClient$),-1)) + "MAS90\SY\"
	pthServer$ 			= HWD + TBL(MID(HWD,-1)=DLM, DLM, $$)
	pthServer$ 			= MID(pthServer$, 1, POS("\MAS90\HOME\"=UCS(pthServer$),-1)) + "MAS90\ASI\"

 	wdx$				= coSession'Wdx$
	isInstalled			= isFALSE
	tmpFH				= HFN
	tmpFile$			= wdx$+"..\ASI\EMV\run.bat"
	open input (tmpFH,err=*next)tmpFile$; isInstalled	= isTRUE
	close (tmpFH,err=*next)
	tmpFH				= 0
	
	if not(isInstalled) and isCS {
		DIRECTORY wdx$+"..\ASI",ERR=*NEXT
		DIRECTORY wdx$+"..\ASI\EMV",ERR=*NEXT
	}

	DIRECTORY wdx$+"..\ASI\EMV\",ERR=*NEXT
	
	tmpFile$			= wdx$+"..\ASI\EMV\"
	cTermDirChk			= _obj'DirectoryCheck(tmpFile$,tmpPathFull$)

	if not(cTermDirChk) {
		retVal			= retFAILURE
		! Error message...
	}

	! check to see if copy needed
	cCopyNeeded			= isCS
	if isCS {
		! check version on the server
		pExe$				= pthServer$ + cInstaller$
		CALL "SY_531APSEmvCsTools.m4p;GET_APS_CLIENT_VERSION",pExe$,pFileVersion$,pProductVersion$,ErrMsg$,Result
		if not(Result) {
			coSession'UI'MessageBox$("","Unable to find the APS client installer.")
			return retFAILURE
		}
		! check the version on the workstation
		cExe$				= pthClientASI$ + cInstaller$
		CALL coSession'Wdx$+"SY_531APSEmvCsTools.m4p;GET_APS_CLIENT_VERSION",cExe$,cFileVersion$,cProductVersion$,ErrMsg$,Result
		
		if result and cFileVersion$ = pFileVersion$ and cProductVersion$ = pProductVersion$ {
			cCopyNeeded		= isFALSE
		}
	}
	
	if isCS and cCopyNeeded {				! if CS/SQL always copy the installer to the workstation on activation.
		cCopyOk			= isFALSE
		oCopy 			= NEW ("*obj/Copier")
		oCopy'SetShowProgress(isTRUE)
		cCopyOK			= oCopy'CopyFileToClient(pthServer$+cInstaller$,pthClientAsi$+cInstaller$,2048,isFALSE)
		DROP OBJECT oCopy, ERR=*PROCEED; oCopy = 0
		if not(cCopyOK) {
			retVal			= retFAILURE
		}
	}
	
RETURN retVal
!

DELETE_REC:
ENTER (key$)
	IF NOT(EditState) {
		FIND (cFH,KEY	= key$,KNO=idxPRIMARY$,DOM=*NEXT); found=isTRUE
		FIND (cFH,KEY	= $$,KNO=cPrimaryIndex$,DOM=*NEXT)
		IF NOT(found) {
			LastErrorNum$	= "CI_RecNotEditable"
			LastErrorMsg$	= MSG(LastErrorNum$)
			RETURN retFAILURE
		}
	}
	retVal=_OBJ'ConfirmDelete()
	IF retVal {
		retVal=_OBJ'Delete(FROM "SY_Maint",key$)
	}
RETURN retVal
!

DIRECTORY_CHECK:
ENTER (path$),pathFULL$
	retVal				= retFAILURE
	pathFULL$			= $$
	REPEAT 
		OPEN (HFN,ERR=*BREAK)path$
		pathFIB$		= FIB(LFO)
		pathFULL$		= PTH(LFO)
		CLOSE (LFO)
	UNTIL 1
	IF MID(pathFIB$,19,1)="D" { ! valid directory found
		pathFULL$		= STP(pathFULL$,1,DLM)+DLM
		retVal			= retSUCCESS
	}
	IF NOT(retVal) AND NOT(NUL(pathFIB$)) { retVal=2 } ! some other file found
RETURN retVal
!

GET_DIRECTORY_CHAIN:
ENTER RootDir$,SubDirChain$,Levels
	retVal 				= retFAILURE
	tmpRootDir$			= RootDir$
	
	tmpFH				= HFN
	OPEN INPUT(tmpfh, ERR=*NEXT) RootDir$; openOK	= isTRUE
	if openOK {
		REPEAT
			srcFile$	= isNULL$
			read (tmpFH,end=*next)srcfile$
			if not(nul(srcfile$)) and mid(srcfile$,1,1) <>	"." { 
				chkDirPath$			= tmpRootDir$ + DLM + srcfile$
				cDirChk				= _obj'DirectoryCheck(chkDirPath$,tmpPathFull$)
				if cDirChk 			= isTRUE {		! will return 2 if a file.
					retVal			= retSUCCESS
					SubDirChain$	+= chkDirPath$ + SEP
					Levels			++
					tmpRetVal		= _obj'GetDirectoryChain(chkDirPath$,SubDirChain$,Levels)
				}
			}
		UNTIL NUL(srcfile$)
	}
	
RETURN retVal
!

GET_ORIGINAL_VALUE:
ENTER tmpcolumn$
	tmpCurrentrcd$		= REC(IOL(cFH))
	READ DATA FROM cOrigrcd$ TO IOL=IOL(cFH)
	IF MID(tmpcolumn$,-1) = "$" {
		tmpvalue$		= EVS(tmpcolumn$)
	} ELSE {
		tmpvalue		= EVN(tmpcolumn$)
	}
	READ DATA FROM tmpCurrentrcd$ TO IOL=IOL(cFH)
	IF MID(tmpcolumn$,-1)="$" {
		retVal			= _OBJ'SetValue(tmpcolumn$,tmpvalue$)
	} ELSE {
		retVal			= _OBJ'SetValue(tmpcolumn$,tmpvalue)
	}
RETURN retVal
!

GET_PAYMENT_TYPE:
ENTER (value$),cPaymentTypeMethod$,cPaymentDesc$,D531APSUseEmvDevice$

	retVal				= retSUCCESS
	pt_found			= isFALSE

	tmpAR_PaymentTypeFH	= coSession'OpenTable("AR_PaymentType", pthCOMPANY$)

	READ (tmpAR_PaymentTypeFH,key=value$,dom=*next); pt_found	= isTRUE

	if pt_found {
		cPaymentTypeMethod$	= PaymentMethod$
		cPaymentDesc$		= PaymentDesc$
	} else {
		retVal = retFAILURE
		LastErrorNum$		= "CI_Invalid"
		LastErrorMsg$		= MSG("CI_Invalid", "payment type")
	}

	if tmpAR_PaymentTypeFH {
		CLOSE (tmpAR_PaymentTypeFH,err=*next)
		tmpAR_PaymentTypeFH	= 0
	}

RETURN retVal
!

POST_DELETE_REC:
	stopFile$			= "stop.bat"
	call wdx$+"../soa/syzdll;Shell_Execute",tmpRetVal,stopFile$,"..\ASI\EMV"

RETURN retSUCCESS
!

POST_WRITE_REC:
	retVal				= retSUCCESS
RETURN retVal
!

RUN_DLL:
	retVal				= DLX("Masext32.dll","ProcessFiles",cCmd$,ERR=*NEXT)
RETURN retVal
!

READ_REC:
ENTER key$
	retVal				= _OBJ'ReadRec(FROM "SY_Maint",key$)

RETURN retVal
!

SET_CHILD_COLL:
	_OBJ'InitChildCollection("PaymentType", "AR_PaymentType_Svc", "PaymentType$", idxPRIMARY$, $$)
RETURN 
!

SET_DEFAULTS:
	_OBJ'SetDefaults(FROM "SY_Maint")
RETURN retSUCCESS
!

SET_KEY:
ENTER (key$)
	retVal=_OBJ'SetKey(FROM "SY_Maint",key$)
RETURN retVal
!

! Validations...
VALIDATE_BAUDRATE:
ENTER val$

	val$		= mid(val$,1,1)
	retVal		= (pos(val$="1234567")>0)		! only valid values.

RETURN retVal
!

VALIDATE_CCPAYMENTTYPE:
ENTER (value$)
	retval				= retSUCCESS

	retval				= _obj'ValidatePaymentType(value$,PaymentTypeMethod$)

	IF not(retVal) or (retVal AND PaymentTypeMethod$ <> "R") {
		retVal			= retFAILURE
		LastErrorNum$	= "CI_Invalid"
		LastErrorMsg$	= MSG("CI_Invalid", "payment type for EMV credit card")
	}
	
RETURN retVal
!

VALIDATE_COM_PORT:
ENTER val
	cVal		= abs(int(val))
	retVal		= retSUCCESS
	
	if cVal < 0 or cVal > 99 {
!		LastErrorMsg$	= MSG("CI_CharInvalid","Com Port Number")
		LastErrorMsg$	= MSG("SY_531APSInvalidRange", "Com Port Number", "99" )		
		retVal			= retFAILURE
		
	}
RETURN retVal
!

VALIDATE_DATABITS:
ENTER val$

	val$		= mid(val$,1,1)
	retVal		= (pos(val$="45678")>0)		! only valid values.

RETURN retVal
!

VALIDATE_DEVICEID:
ENTER val$
	retVal		= retSUCCESS
	! Check for illegal characters
	IF POS(cInvalidTerminalCodeChars$:val$) {
		LastErrorMsg$	= MSG("CI_CharInvalid","Device ID")
		retVal			= retFAILURE
	}

RETURN retVal
!

VALIDATE_D531APSAPIKEY:
ENTER val$
	retVal		= (not(nul(stp(D531APSApiKey$))))
RETURN retVal
!

VALIDATE_EMVENDPOINT:
ENTER val$
	retVal		= (not(nul(stp(EMVEndpoint$))))
RETURN retVal
!

VALIDATE_EMVWEBPORT:
ENTER val$
	retVal 		= retFAILURE
	val			= num(val$,err=*next)
	if val > 0 and val <= 65536 {
		retVal	= retSUCCESS
	}

RETURN retVal
!

VALIDATE_FLOWCONTROL:
ENTER val$
	val$		= mid(val$,1,1)
	retVal		= (pos(val$="NHX")>0)		! only valid values.

RETURN retVal
!

VALIDATE_PARITY:
ENTER val$

	val$		= mid(val$,1,1)
	retVal		= (pos(val$="NOENS")>0)		! only valid values.
	
RETURN retVal
!

VALIDATE_PAYMENTDEVICE:
	if nul(PaymentDevice$) {
		PaymentDevice$	= "1"
	}
	
	SWITCH PaymentDevice$
		CASE "1"
			Model$		= "Ingenico-iPP320-RBA"
			BREAK
		CASE "2"
			Model$		= "Ingenico-iSC250-RBA"
			BREAK
		CASE "3"
			Model$		= "VeriFone-Mx915-XPI"
			BREAK
		CASE "4"
			Model$		= "VeriFone-Vx820-XPI"
			BREAK
		CASE "5"
			Model$		= "Ingenico-iPP350-RBA"
			BREAK
		CASE "6"
			Model$		= "VeriFone-Mx925-XPI"
			BREAK
		DEFAULT
			Model$		= "Ingenico-iPP320-RBA"
			BREAK
	END SWITCH
	! setvalue model$ ??
	
	retVal				= retSUCCESS	
	
RETURN retVal
!

VALIDATE_PAYMENT_TYPE:

ENTER (value$),cPaymentTypeMethod$

	retVal				= retSUCCESS
	
	retVal				= _obj'GetPaymentType(Value$,cPaymentTypeMethod$,PaymentDesc$,D531APSUseEmvDevice$)

	if retVal and D531APSUseEmvDevice$ = isYES$ {
		cPaymentTypeMethod$	= PaymentMethod$
	} else {
		retVal = retFAILURE
	}
	
RETURN retVal
!

VALIDATE_PORT:
ENTER val$

	retVal 		= retFAILURE
	p			= 0
	v			= 0
	v$			= isNULL$
	
	v			= pos("COM"=val$)
	if v {
		v$		= mid(val$,v+3)
	}
	p			= int(num(v$,err=*next))
	if p => 1 and p <= 99 {
		retVal	= retSUCCESS
	}
	
RETURN retVal
!

VALIDATE_SERVERPORT:
ENTER val$	
	retVal 		= retFAILURE
	val			= num(val$,err=*next)
	if val > 0 and val <= 65536 {
		retVal	= retSUCCESS
	}
RETURN retVal
!

VALIDATE_SOCKET:
	retVal		= retSUCCESS
RETURN retVal
!

VALIDATE_STOPBITS:
ENTER val$

	val$		= mid(val$,1,1)
	retVal		= (pos(val$="123")>0)		! only valid values. 1=1.0, 2=1.5, 3=2.0

RETURN retVal
!

VALIDATE_TERMINAL_CODE:
ENTER (val$)
	! Terminal code can not be less than 3 characters (SY_Maint only validates max)
	retVal				= LEN(val$)=cTerminalCodeLen
	IF NOT(retVal) {
		LastErrorNum$	= "SY_InvalidLength"
		LastErrorMsg$	= MSG(LastErrorNum$,"Terminal Code",STR(cTerminalCodeLen))
		! Check for illegal characters
		IF POS(cInvalidTerminalCodeChars$:val$) {
			LastErrorMsg$	+= "\"+MSG("CI_CharInvalid","Terminal Code")
		}
		RETURN retFAILURE
	}
	! Check for illegal characters (format type ALPHANUM without the " " space)
	retVal				= NOT(POS(cInvalidTerminalCodeChars$:val$))
	IF NOT(retVal) {
		LastErrorNum$	= "CI_CharInvalid"
		LastErrorMsg$	= MSG("CI_CharInvalid","Terminal Code")
		RETURN retFAILURE
	}
RETURN retVal
!

VALIDATE_TERMINAL_POS_ID:
ENTER (val$)
	if nul(Val$) {
		val$			= "Till1"
	}
	retVal				= LEN(val$)>=cTerminalCodeLen
	IF NOT(retVal) {
		LastErrorNum$	= "SY_InvalidLength"
		LastErrorMsg$	= MSG(LastErrorNum$,"POS ID",STR(cTerminalCodeLen))
		! Check for illegal characters
		IF POS(cInvalidTerminalCodeChars$:val$) {
			LastErrorMsg$	+= "\"+MSG("CI_CharInvalid","POS ID")
		}
		RETURN retFAILURE
	}
	! Check for illegal characters (format type ALPHANUM without the " " space)
	retVal				= NOT(POS(cInvalidTerminalCodeChars$:val$))
	IF NOT(retVal) {
		LastErrorNum$	= "CI_CharInvalid"
		LastErrorMsg$	= MSG("CI_CharInvalid","POS ID")
		RETURN retFAILURE
	}
RETURN retVal
!

VALIDATE_TICKINTERVAL:
ENTER val
	retVal 		= retFAILURE
	if val >= 25 and val <= 1500 {
		retVal	= retSUCCESS
	}
RETURN retVal
!

VALIDATE_TIMEOUT:
ENTER val
	retVal 		= retFAILURE
	if val >= 15 and Timeout <= 90 {
		retVal	= retSUCCESS
	}
RETURN retVal
!

VALIDATE_TMSTYPE:
ENTER val$
	
	retVal		= tbl(pos(val$="PT")>0,retFAILURE,retSUCCESS)
	
RETURN retVal
!

VALIDATE_WORKSTATIONID:
ENTER Val$

	retVal				= not(nul(Val$))
	IF NOT(retVal) {
		LastErrorNum$	= "CI_Required"
		LastErrorMsg$	= MSG("CI_Required","Workstation ID")
		RETURN retFAILURE
	}
	
RETURN retVal
!

WRITE:
	retVal				= retSUCCESS
	
	IF NUL(TerminalKey$) {
		TerminalKey$	= coSession'GetNextSurrogate$("SY_531APSEmvTerminal")
		IF NUL(TerminalKey$) {
			TerminalKey$	= coSession'AddSurrogate$("SY_531APSEmvTerminal","TerminalKey$")
		}
	}
	tmpTerminalKey$		= TerminalKey$
	tmpTerminalCode$	= TerminalCode$
	newTerminal			= (EditState = edtNEW)
	retVal=_OBJ'Write(FROM "SY_Maint")
	
RETURN retVal
!
