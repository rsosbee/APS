! $Id: AR_531APSConvertFromCSV.pvc $
! Copyright 2016-2018 (C) by Accounting Systems Inc. (ASI) All rights reserved.
! ASI - PLW 2016-09-30, RCS 2017-09-27
!

DEF CLASS "AR_531APSConvertFromCSV" CREATE REQUIRED DELETE REQUIRED

	! Inherits from the following class(es)
	LIKE "SY_OpenObject"

	! Properties

	! Local Objects

	! Local Variables
	LOCAL oActivation
	LOCAL coARCustomerCreditCard_bus
	LOCAL coARCreditCard

	LOCAL cAR_CustFH
	LOCAL cOrderHeaderFH
	LOCAL cInvHeaderFH
	LOCAL cAR_PaymentTypeFH
	LOCAL cAR_APSPaymentTypeFH
	LOCAL cAR_APSConvertPaymentTypesFH
	LOCAL cCustCCFH
	LOCAL cAPSCustCCFH
	LOCAL cAPSActivated = 1
	LOCAL progressMeterDelay

	LOCAL cUnencryptedVaultID$
	LOCAL cEncryptedVaultID$
	LOCAL cUnencryptedMerchantKey$
	LOCAL cEncryptedMerchantKey$

	LOCAL inputIOL$ 			= CPL("IOLIST RefID$:[STR("","")],SPSGUID$:[STR("","")]")

	! Functions
	FUNCTION LOCAL RemoveObsoleteWrkTables()									REMOVE_OBSOLETE_WRK_TABLES
	FUNCTION LOCAL ConvertCardsToAPS()											CONVERT_CARDS_TO_APS
	FUNCTION LOCAL SwitchVaultRecord$(APSfromID$, APSfromKey$, APStoID$, \
					APStoKey$, APSorig_guid$, D531APSApiKey$)					SWITCH_VAULT_RECORD
	FUNCTION LOCAL ValidateCredentials(APS_m_Id$,APS_Pwd$,SPS_vID$,SPS_key$)	VALIDATE_CREDENTIALS
	FUNCTION LOCAL ValidateSPS(vaultID$, MerchKey$)								VALIDATE_SPS
 	FUNCTION LOCAL UpdatesURLs()												UPDATE_URLS
	! Elements Defined Elsewhere, but Referenced Locally
	LOCAL coSession

END DEF
!

ON_CREATE:

ENTER coSession
	%APSPreConversion			= 1 ! PLW 2016-05-12 allow for conversion before activation
	! Inheritance check to ensure object is not directly created
	IF POS(UCS(_OBJ'_Class$)	= UCS(PGN)) {
		coSession'LastErrorNum$ = "SY_NotInherited"
		coSession'LastErrorMsg$ = MSG("SY_NotInherited", _OBJ'_Class$)
		EXIT 200 ! SY_Constant not in direct inheritance structure of this class
	}

RETURN
!

ON_DELETE:
	DROP OBJECT coARCustomerCreditCard_bus,ERR=*PROCEED; coARCustomerCreditCard_bus = 0
RETURN
!

REMOVE_OBSOLETE_WRK_TABLES:

	IF NOT(coSession'SQL) {
		baseJulian  = JUL(1970, 1, 1)
		today$      = DTE(0:"%Y%Mz%Dz%S")
		todayJulian = JUL(NUM(MID(today$,1,4)), NUM(MID(today$,5,2)), NUM(MID(today$,7,2)))
		daysDiff    = todayJulian - baseJulian
		todayTime   = daysDiff + NUM(today$(9))/(24*60*60)

		directoryPath$ = coSession'PathCompany$ + "AR" + coSession'CompanyCode$
		directoryFH    = HFN
		OPEN(directoryFH)directoryPath$

		WHILE 1
			READ(directoryFH, END=*BREAK)fileName$
			IF POS("WRK"=UCS(fileName$)) AND NOT(POS("WRK.M4T"=UCS(fileName$))) {
				fileFH = HFN
				OPEN(fileFH)directoryPath$ + DLM + fileName$
				fileTimeInDays = NUM(FIN(fileFH, "UTC_CTime"))/(24*60*60)
				CLOSE(fileFH)
				IF fileTimeInDays < todayTime - 1 {
					ERASE directoryPath$ + fileName$, ERR=*NEXT
				}
			}
		WEND

		CLOSE(directoryFH)
	}

RETURN retSUCCESS
!

CONVERT_CARDS_TO_APS:

	retVal			= retSUCCESS
	inputFH			= HFN
	OPEN(inputFH)ML_IMPORT_PATH$
	SERIAL ML_EXPORT_PATH$
	outputFH = HFN
	OPEN LOCK(outputFH)ML_EXPORT_PATH$
	APSMerchantID$	= cUnencryptedAPSMerchantID$
	Password$		= cUnencryptedAPSMerchantPassword$
	fromID$			= cUnencryptedVaultID$
	fromKey$		= cUnencryptedMerchantKey$
	totalRecs		= 0
	recordCount		= 0
	SELECT JUNK$ FROM inputFH
		totalRecs	++
	NEXT RECORD
	CLOSE (inputFH)
	OPEN (inputFH)ML_IMPORT_PATH$
	SELECT IOL=inputIOL$ FROM inputFH
		recordCount++
		APSGUID$	= _OBJ'SwitchVaultRecord$((fromID$), (fromKey$), (cEncryptedAPSMerchantID$), (cEncryptedAPSMerchantPassword$),(SPSGUID$))
		IF NUL(APSGUID$) { APSGUID$ = "*******" }
		outputRec$	= RefID$+","+SPSGUID$+","+APSGUID$
		WRITE RECORD(outputFH)outputRec$

		IF progressMeterDelay++>25 AND coSession'UI {
			progressMeterDelay = 0
			coSession'UI'ProgressBar("update","Copying SPS Card Information to APS","Card "+STR(recordCount)+" of "+STR(totalRecs),pct)
			wait .1
		}

	NEXT RECORD
	CLOSE (outputFH)
	CLOSE (inputFH)
	inputFH			= 0
	outputFH		= 0
RETURN retVal
!

SWITCH_VAULT_RECORD:

ENTER APSfromID$, APSfromKey$, APStoID$, APStoKey$, APSorig_guid$, D531APSApiKey$, ERR = *NEXT
	IF NOT(coARCreditCard) { coARCreditCard = NEW("AR_CreditCard", coSession, ERR=*NEXT) }
	cAPSActivated	= isFALSE ! the data must be taken from the SPS vault
	new_guid$		= $$
	data$			= coARCreditCard'VerifyGUID$(APSfromID$, APSfromKey$, APSorig_guid$)
	cAPSActivated	= isTRUE
	IF NOT(NUL(data$)) {
		P			= POS("|"=data$)
		IF P {
			CCnumber$	= MID(data$,1,P-1)
			expdate$	= MID(data$,P+1)
			new_guid$	= coARCreditCard'AddAPSCreditCard$((APStoID$), (APStoKey$), (CCnumber$), (expdate$), (D531APSApiKey$))
			IF NOT(NUL(new_guid$)) { NumberOfConvertedCards++ } ! I will use this property in CopyAPSVaultToCCPaymentTypes() method

		}
	}

RETURN new_guid$
!

VALIDATE_CREDENTIALS:

ENTER EncryptedAPSMerchantID$,EncryptedAPSPassword$,EncryptedSPSVaultID$,EncryptedSPSMerchantKey$, cAPSApiKey$,err=*next

	IF NOT(coARCreditCard) { coARCreditCard = NEW("AR_CreditCard", coSession, ERR=*NEXT) }
	
	tmpVal				= isFALSE
	tmpval				= coARCreditCard'TestAPSCredentials(EncryptedAPSMerchantID$,EncryptedAPSPassword$, cAPSApiKey$,err=*next)
	
	IF NOT(tmpVal) {
		LastErrorNum$ = "APS - "+coARCreditCard'LastErrorNum$
		LastErrorMsg$ = "APS - "+coARCreditCard'LastErrorMsg$
		RETURN retFAILURE
	}
	_obj'DecryptPassword(EncryptedSPSVaultID$,UnencryptedSPSVaultID$)
	_obj'DecryptPassword(EncryptedSPSMerchantKey$,UnencryptedSPSMerchantKey$)
	IF NOT(_obj'ValidateSPS(UnencryptedSPSVaultID$,UnencryptedSPSMerchantKey$)) { RETURN retFAILURE }

RETURN retSUCCESS
!

VALIDATE_SPS:
ENTER cUnencryptedVaultID$, cUnencryptedMerchantKey$

	IF NOT(NUL(cUnencryptedVaultID$)) AND NOT(NUL(cUnencryptedMerchantKey$)) {
		IF NOT(coARCreditCard) { 
			coARCreditCard	= NEW("AR_CreditCard", coSession, ERR=*NEXT) 
		}

		IF coARCreditCard {
			retVal		= coARCreditCard'TestSPSConnection(cUnencryptedVaultID$, cUnencryptedMerchantKey$)

			IF retVal	= retSUCCESS {
				CreditCardSetupTested$	= isYES$
			} ELSE {
				retVal			= retWARNING
				LastErrorNum$	= "AR_InvalidMerchant"
				LastErrorMsg$	= MSG("AR_InvalidMerchant")
			}
		} ELSE {
			retVal				= retFAILURE
			LastErrorNum$		= "SPS - "+coSession'LastErrorNum$
			LastErrorMsg$		= "SPS - "+coSession'LastErrorMsg$
		}
	} ELSE {
		retVal			= retSUCCESS

	}

RETURN retVal
!

UPDATE_URLS:
	retVal				= retSUCCESS
	URLMaintenanceObj	= NEW("SY_URLMaintenance_bus",coSession)

	IF URLMaintenanceObj {
		! primary URL
		tmpRet			= URLMaintenanceObj'SetKey("APS PRIMARY")
		IF tmpRet {
			tmpRet		= URLMaintenanceObj'SetValue("URLDesc$","APS Primary URL")
		}
		IF tmpRet {
			tmpRet		= URLMaintenanceObj'SetValue("URL$","https://secure.apspaymentgateway.com/api/transact.php")
		}
		IF tmpRet {
			tmpRet		= URLMaintenanceObj'WRITE()
		}
		IF tmpRet {
			! query URL
			tmpRet		= URLMaintenanceObj'SetKey("APS Query")
			IF tmpRet {
				tmpRet	= URLMaintenanceObj'SetValue("URLDesc$","APS Query URL")
			}
			IF tmpRet {
				tmpRet	= URLMaintenanceObj'SetValue("URL$","https://secure.apspaymentgateway.com/api/query.php")
			}
			IF tmpRet {
				tmpRet	= URLMaintenanceObj'WRITE()
			}
			IF NOT(tmpRet) {
				retVal			= retFAILURE
				LastErrorNum$	= URLMaintenanceObj'LastErrorNum$
				LastErrorMsg$	= URLMaintenanceObj'LastErrorMsg$
			}
		} ELSE {
				retVal			= retFAILURE
				LastErrorNum$	= URLMaintenanceObj'LastErrorNum$
				LastErrorMsg$	= URLMaintenanceObj'LastErrorMsg$
		}
	} ELSE {
		retVal			= retFAILURE
		LastErrorNum$	= coSession'LastErrorNum$
		LastErrorMsg$	= coSession'LastErrorMsg$
	}

	DROP OBJECT URLMaintenanceObj,ERR=*NEXT

RETURN retVal
!
