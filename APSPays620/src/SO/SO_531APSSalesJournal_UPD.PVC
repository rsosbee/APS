! $Id: SO_531APSSalesJournal_UPD.pvc $
! Copyright 2018 (C) by Accounting Systems Inc. (ASI) All rights reserved.
!

DEF CLASS "SO_531APSSalesJournal_UPD"

	! Inherits from the following class(es)
	LIKE "SO_SalesJournal_UPD"
	LIKE "SY_531APSMultiCurrencyCommon" ! PLW 2019-02-12 Ticket #248049

	! Public Properties

	! Local/Private Properties

	LOCAL APSActivated
	LOCAL cAmountPosted 				! for credit memo amount applied.
	LOCAL cLevel3LineLimit		= 10	! PLW limit the number of lines sent for Level III
	LOCAL c2p.APIKey$
	LOCAL c2p.BlocksProcessed	= 0
	LOCAL c2p.Currency$
	LOCAL c2p.DataFormat$
	LOCAL c2p.D531_C2PLinkCode$
	LOCAL c2p.Enabled
	LOCAL ihh.D531_C2PLinkCode$
	LOCAL logFile$
	
	! object handles
	LOCAL coARCreditCard
	LOCAL coCompany
	LOCAL coDocument
	LOCAL coRequest

	! file handles
	LOCAL c2p.ArCustFH
	LOCAL c2p.ArPaytypeFH
	LOCAL c2P.AROpenInvFH
	LOCAL c2p.SoInvFH
	LOCAL c2p.SoInvPayFH

	! Public Functions (Methods)

	! Local/Private Functions (Methods)
	FUNCTION LOCAL PERFORM C2PLogErrors()								C2P_LOG_ERRORS
	
	FUNCTION LOCAL PERFORM LogFailedTransaction(Display,errString$)		LOG_FAILED_TRANSACTION ! #239287 - 2018-07-05 RCS

	FUNCTION LOCAL PERFORM PostTableRead(asiTableName$) 				POST_TABLE_READ
	FUNCTION LOCAL PERFORM PreTableWrite(asiTableName$) 				PRE_TABLE_WRITE

	! ** Process Credit Card Transactions.
	! ** @returns [boolean] always True = success, if failure occurs during processing the standard error log will print
	FUNCTION LOCAL ProcessCreditCardTrans()								PROCESS_CREDIT_CARD_TRANS
	
	FUNCTION LOCAL PERFORM UploadPayments()								UPLOAD_PAYMENTS

	! Elements Defined Elsewhere, but Referenced Locally
	LOCAL coSession
END DEF
!

ON_CREATE:
ENTER coSession

	! check for activation
	coAPSActivation		= NEW("SY_531APSActivation_bus",coSession,ERR=*NEXT)

	IF coAPSActivation {
		APSActivated	= coAPSActivation'CheckAPSActivation ()
		DROP OBJECT coAPSActivation
		IF APSActivated { 
			cAllowMultipleEMailAddresses	= isFALSE
		}
	}

	coCompany			= NEW("SY_Company_SVC",			coSession)
	coCompany'FIND(coSession'companyKey$)

	c2p.Enabled			= coCompany'C2PEnabled

	coCompany'GetValue("D531APSLevelIIIProcessing$",	c2p.APSLevelIIIProcessing$)
	coCompany'GetValue("D531APSSummaryCommodityCode$",	c2p.APSSummaryCommodityCode$)
	coCompany'GetValue("D531APSItemCommodityCode$",		c2p.APSItemCommodityCode$)
	coCompany'GetValue("D531ShipFromPostal$",			c2p.APSShipFromPostal$) ! PLW 2017-12-18, RCS 2018-01-05

	coCompany'GetValue("D531_C2PAPIKey$",				c2p.APIKey$)
	coCompany'GetValue("D531_C2PCurrency$",				c2p.Currency$)

	coDocument			= NEW("SY_531APSDocument_SVC",	coSession)

	coRequest			= NEW("SY_531APSRequest",		coSession)

	c2p.DataFormat$		= coRequest'DataFormat$

	c2p.ArCustFH		= coSession'OpenTable("AR_Customer",		"COMPANY")
	c2p.ArPaytypeFH		= coSession'OpenTable("AR_PaymentType",		"COMPANY")
	c2P.AROpenInvFH		= coSession'OpenTable("AR_OpenInvoice",		"COMPANY") ! 2018-05-02 RCS
	c2p.SoInvFH			= coSession'OpenTable("SO_InvoiceHeader",	"COMPANY")
	c2p.SoInvPayFH		= coSession'OpenTable("SO_InvoicePayment",	"COMPANY")

RETURN
!

ON_DELETE:
	DROP OBJECT coRequest,	ERR=*PROCEED;		coRequest		= 0
	DROP OBJECT coDocument,	ERR=*PROCEED;		coDocument		= 0
	DROP OBJECT coCompany,	ERR=*PROCEED;		coCompany		= 0

	CLOSE (c2p.ArCustFH,	ERR=*PROCEED);		c2p.ArCustFH	= 0
	CLOSE (c2p.ArPaytypeFH,	ERR=*PROCEED);		c2p.ArPaytypeFH	= 0
	CLOSE (c2P.AROpenInvFH,	ERR=*PROCEED);		c2P.AROpenInvFH = 0
	CLOSE (c2p.SoInvFH,		ERR=*PROCEED);		c2p.SoInvFH		= 0
	CLOSE (c2p.SoInvPayFH,	ERR=*PROCEED);		c2p.SoInvPayFH	= 0
RETURN
!

C2P_LOG_ERRORS: ! #239287 - 2018-07-05 RCS

	if nul(cErrString$) {
		cErrString$		= "SO SalesJournal"
	}
	errorDesc$			= " - Code: " + str(c2p.statusCode) + " - " + c2p.errorMessage$ + " Exception ID: " + c2p.exceptionID$
	IF retVal			= retFAILURE {
		errorDesc$		= "Connection to Click To Pay failed! " + c2p.errorMessage$
	}
	IF cBatchFlag$		= isYES$ {
		coRequest'WriteLog(cErrString$,"Inv: " + tInvoiceNo$ + " (" + BatchNo$ + ") " + errorDesc$, logFile$)
	} ELSE {
		coRequest'WriteLog(cErrString$,"Inv: " + tInvoiceNo$ + " " + errorDesc$, logFile$)
	}
	ErrorText$			= isNULL$
	cErrString$			= isNULL$
	%logFile$			= logFile$

RETURN retSUCCESS
!

LOG_FAILED_TRANSACTION: ! #239287 - 2018-07-05 RCS
Enter Display,errString$,err=*next
	cErrorsExist		= isTRUE
	errorDesc$			= c2p.errorMessage$
	if not(ErrorLog) {
		ErrorLog = NEW("SY_JournalErrorLog", coSession, ERR=*NEXT)	! catch restart. DT# 1342 - 2020-04-09 - RCS
	}
	if not(coSession'Updating) {	! DT# 1342 - 2020-04-09 - RCS
		IF cBatchFlag$		= isYES$ {
			ErrorLog'WriteError(errString$,tInvoiceNo$ + " (" + BatchNo$ + ")", errorDesc$)
		} ELSE {
			ErrorLog'WriteError(errString$,tInvoiceNo$,errorDesc$)
		}
	}
	_obj'C2PLogErrors()
	ErrorText$			= isNULL$
	errString$			= isNULL$
	if Display {
		coSession'UI'MessageBox$(isNULL$,								\
				"Failed ClickToPay Payment Transaction!" + SEP + 		\
				"APS ClickToPay error message: " + c2p.ErrorMessage$,	\
				"title=APS ClickToPay,style=OK,icon=S,beep")
	}

RETURN retSUCCESS
!			

POST_TABLE_READ:
ENTER (asiTableName$)	! #252126 - 2019-05-17 RCS

 	retVal = _OBJ'PostTableRead(FROM "SO_531APSSalesJournal_UPD_base", asiTableName$)	! #252126 - 2019-05-17 RCS

	IF retVal AND c2p.Enabled { ! C2P

		SWITCH asiTableName$	! #252126 - 2019-05-17 RCS
			CASE "SO_InvoiceHeader:002","SO_InvoiceHeader:004" 			! populateWorktable, updateMain
				READ (cInvHdrFH, KEY=KEC(cInvHdrFH), REC=c2p.header$)

				c2p.D531_C2PLinkCode$		= isNULL$					! #241845 - 2018-09-13 RCS
				if pos(c2p.header.InvoiceType$="AD|CA|DM|FC|XD") {		! Skip ADjustments, CAsh invoices, Debit Memos, Finance Charges, and deleted invoices #251756 - 2019-05-22 RCS
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK
				}

				! skip open credit memos...for now.
				IF c2p.header.invoiceType$	= "CM" and nul(c2p.header.ApplyToInvoiceNo$) {
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK
				}

				! skip credit memos while in scan...
				IF not(coSession'Updating) and c2p.header.invoiceType$ = "CM" and not(nul(c2p.header.ApplyToInvoiceNo$)) {
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK
				}

				! Opt in/Opt Out
				cCustRecRead		= isFALSE ! RCS 2018-03-13 #235665
				READ (c2p.ArCustFH,rec=TMP$,key=c2p.header.ARDivisionNo$:c2p.header.CustomerNo$,dom=*next); cCustRecRead = isTRUE ! RCS 2018-03-13
				if cCustRecRead		= isFALSE {
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK 
				} ! RCS 2018-03-13 - #235665 skip stub records
				
				if tmp.OpenItemCustomer$ <> isYES$ {
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK ! skip balance forward.
				}

				cSkip			= coRequest'OptInOrOut(tmp.D531_C2POption$)
				if cSkip {
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK
				}

				cBalance 	= c2p.header.TaxableAmt + c2p.header.NonTaxableAmt + c2p.header.FreightAmt + c2p.header.SalesTaxAmt - c2p.header.DiscountAmt
				cDeposit	= c2p.header.DepositAmt		! #256264 - 2019-09-20 RCS
				
				if pos(c2p.header.invoiceType$	= "IN|DM|CA|FC") and cBalance - cDeposit <= 0 {	! #256264 - 2019-09-20 RCS
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK 	! no upload if paid in full
				}
				
				! check for negative invoice/debit memo RCS #241229 - 2018-08-28 
				if pos(c2p.header.invoiceType$	= "IN|CA|DM|FC") and cBalance - cDeposit <= 0 {
					prefixKey$					= "c2p.header."
					coRequest'SetC2pFlags()
					BREAK ! no upload if paid in full or negative balance.
				}

				! check for payments/authorizations
				pt_found=0
				READ (c2p.ArPaytypeFH,REC=PT$,key=c2p.header.PaymentType$,dom=*next); pt_found=1
				if pt_found and pos(pt.PaymentMethod$="RA") {
					cSeqNoBeg$="000000",cSeqNoEnd$="999999",cTempDep=0
					SELECT *,REC=PAY$ from c2p.SoInvPayFH BEGIN c2p.header.InvoiceNo$:cSeqNoBeg$ + $00$ END c2p.header.InvoiceNo$:cSeqNoEnd$ + $FE$
						cTempDep	+= pay.TransactionAmt
					NEXT RECORD
					if cBalance - cTempDep <= 0 {
						prefixKey$					= "c2p.header."
						coRequest'SetC2pFlags()
						BREAK 	! no upload if paid in full
					}
				}

				! check credit memos that are applying...
				IF coSession'Updating and c2p.header.invoiceType$ = "CM" and not(nul(c2p.header.ApplyToInvoiceNo$)) {
					cAmountPosted 				= cBalance - cTempDep
					c2p.detail.InvoiceNo$		= c2p.header.ApplyToInvoiceNo$
					c2p.detail.InvoiceType$		= "IN"
					c2p.detail.amountPosted		= abs(cAmountPosted)
					! check invoice balance 2018-05-02 RCS
					bal.BALANCE					= 0
					READ (c2P.AROpenInvFH, KEY = c2p.header.ARDivisionNo$:c2p.header.CustomerNo$:c2p.header.ApplyToInvoiceNo$:c2p.detail.InvoiceType$, REC = bal$,DOM=*NEXT )
					IF bal.BALANCE	<= 0 { ! Skip fully paid or negative invoices.
						prefixKey$					= "c2p.header."
						coRequest'SetC2pFlags()
						BREAK 
					}
					_obj'UploadPayments() ! apply the credit memo as a payment
					BREAK
				}

				if c2p.header.D531_C2PWebInvCreated$ = isYES$ and not(coSession'Updating) {
					BREAK ! already created the invoice on the gateway
				}
				if c2p.header.D531_C2PWebInvUpdated$ = isYES$ and coSession'Updating {
					c2p.D531_C2PLinkCode$		= c2p.header.D531_C2PLinkCode$
				}

				! upload invoice
				rtnval			= coRequest'ProcessSOInvoice(		\
											c2p.header.InvoiceNo$,	\
											c2p.header.InvoiceType$,\
											c2p.statusCode,			\
											c2p.statusClassCode,	\
											c2p.errorMessage$,		\
											c2p.D531_C2PLinkCode$)

				SWITCH rtnVal
					CASE retSUCCESS ! was able to send the request and get an answer
						if not(coSession'Updating) and c2p.statusClassCode = retSUCCESS {
							c2p.header.D531_C2PWebInvCreated$	= isYES$
							c2p.header.D531_C2PLinkCode$		= c2p.D531_C2PLinkCode$
							WRITE (c2p.SoInvFH, REC=c2p.header$)
						}
						if coSession'Updating and c2p.statusClassCode = retSUCCESS {
							c2p.header.D531_C2PWebInvUpdated$	= isYES$
							c2p.header.D531_C2PLinkCode$		= c2p.D531_C2PLinkCode$
							WRITE (c2p.SoInvFH, REC=c2p.header$)
						}
						if not(coSession'Updating) and c2p.statusClassCode > 1 and c2p.statusCode <> 50003 { ! skip duplicate invoice creation issue.
							cErrorsExist				= isTRUE
							errString$					= "A0"
							errorDesc$					= str(c2p.statusCode)+" - "+c2p.errorMessage$+" Exception ID: "+c2p.exceptionID$
							IF cBatchFlag$				= isYES$ {
								ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$+" ("+BatchNo$+")",errorDesc$)
							} ELSE {
								ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$,errorDesc$)
							}
							ErrorText$					= isNULL$
							errString$					= isNULL$
						}
						BREAK
					CASE retWARNING ! request connected at an insecure level
						if not(coSession'Updating) and coRequest'tlsWarning = isFALSE {
							coRequest'TlsWarning()
						}
						if not(coSession'Updating) and c2p.statusClassCode = retSUCCESS {
							c2p.header.D531_C2PWebInvCreated$	= isYES$
							c2p.header.D531_C2PLinkCode$		= c2p.D531_C2PLinkCode$
							WRITE (c2p.SoInvFH, REC=c2p.header$)
						}
						if coSession'Updating and c2p.statusClassCode = retSUCCESS {
							c2p.header.D531_C2PWebInvUpdated$	= isYES$
							c2p.header.D531_C2PLinkCode$		= c2p.D531_C2PLinkCode$
							WRITE (c2p.SoInvFH, REC=c2p.header$)
						}

						if not(coSession'Updating) and c2p.statusClassCode > 1 and c2p.statusCode <> 50003 { ! skip duplicate invoice creation issue.
							cErrorsExist			= isTRUE
							errString$				= "A0"
							errorDesc$				= str(c2p.statusCode)+" - "+c2p.errorMessage$+" Exception ID: "+c2p.exceptionID$
							IF cBatchFlag$ 			= isYES$ {
								ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$+" ("+BatchNo$+")",errorDesc$)
							} ELSE {
								ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$,errorDesc$)
							}
							ErrorText$				= isNULL$
							errString$				= isNULL$
						}
						BREAK
					DEFAULT
						! failed to send transaction!
						if not(coSession'Updating) { ! only write errrors for the journal log during scan.
							cErrorsExist			= isTRUE
							%APS_C2P_ErrorsExist	= isTRUE
							errString$				= "A0"
							errorDesc$				= "Connection to Click To Pay failed! "+c2p.errorMessage$+" Exception ID: "+c2p.exceptionID$
							IF cBatchFlag$ = isYES$ {
								ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$+" ("+BatchNo$+")",errorDesc$)
							} ELSE {
								ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$,errorDesc$)
							}
							ErrorText$				= isNULL$
							errString$				= isNULL$
						}
						BREAK
				END SWITCH

				! catch errors during update and generate the log.
				IF c2p.statusClassCode > 1 and coSession'Updating and rtnVal { ! #232007 - 2018-07-05 RCS
					tInvoiceNo$ 					= c2p.header.invoiceNo$ + c2p.header.invoiceType$		! DB# 1289 - 2020-03-12 - RCS
					%APS_C2P_ErrorsExist			= isTRUE
					cErrString$						= "SO SalesJournal Updating"
					SWITCH int(c2p.statusCode)
						CASE 30001 ! Skip not on file but log.  Should not be getting this.
							_obj'LogFailedTransaction(isFalse,cErrString$)
							BREAK
						CASE 50003 ! skip duplicate invoice creation issue.
							BREAK
						DEFAULT
							_obj'LogFailedTransaction(isFalse,cErrString$)
							BREAK
					END SWITCH
				}
			
				IF rtnVal=retFAILURE and coSession'Updating {
					tInvoiceNo$ 					= c2p.invoiceNo$ + c2p.invoiceType$		! DB# 1289 - 2020-03-12 - RCS
					%APS_C2P_ErrorsExist			= isTRUE
					cErrString$						= "SO SalesJournal Updating"
					_obj'LogFailedTransaction(isFalse,cErrString$)
				}

				! check for payments/authorizations/other deposits
				if coSession'Updating {
					pt_found						= isFALSE
					READ (c2p.ArPaytypeFH,REC=PT$,key=c2p.header.PaymentType$,dom=*next); pt_found	= isTRUE
					if pt_found and pos(pt.PaymentMethod$	= "RA") { ! cRedit card, Ach
						cSeqNoBeg$					= "000000"
						cSeqNoEnd$					= "999999"
						SELECT *,REC=PAY$ from c2p.SoInvPayFH					\
							BEGIN c2p.header.InvoiceNo$:cSeqNoBeg$	+ $00$		\
							END  c2p.header.InvoiceNo$:cSeqNoEnd$	+ $FE$		\
							WHERE not(nul(pay.CreditCardAuthorizationNo$))		\
							AND pay.TransactionAmt
							c2p.detail.InvoiceNo$		= c2p.header.InvoiceNo$
							c2p.detail.InvoiceType$		= c2p.header.InvoiceType$
							c2p.detail.amountPosted		= pay.TransactionAmt
							_obj'UploadPayments()
						NEXT RECORD
					} ELSE {
						if pt_found and c2p.header.DepositAmt { ! all other payment types
							c2p.detail.InvoiceNo$		= c2p.header.InvoiceNo$
							c2p.detail.InvoiceType$		= c2p.header.InvoiceType$
							c2p.detail.amountPosted		= c2p.header.DepositAmt
							_obj'UploadPayments()
						}
					}
				}
				BREAK
		END SWITCH
	}

	! #231968 - 2018-02-23 RCS - Expiration date processing.

 	IF retVal AND APSActivated {
 		SWITCH asiTableName$
 			CASE "SO_InvoiceHeader:002" ! populateWorktable

 				READ (cInvHdrFH, KEY=KEC(cInvHdrFH), REC=aps.header$)
 				IF aps.header.invoiceType$ = "XD" { BREAK }		! skip voided.
	
				cCustRecRead		= isFALSE
				READ (c2p.ArCustFH,rec=TMP$,key=aps.header.ARDivisionNo$:aps.header.CustomerNo$,dom=*next); cCustRecRead = isTRUE
				if cCustRecRead		= isFALSE { BREAK } 		! RCS 2018-03-13 - #235665 skip stub records

 				! check for payments/authorizations
 				if aps.header.D531_APSDoExpiredCapture$ = isYES$ {
 					BREAK	! Skip expiration check per user's choice.
 				}
 				! check for forced sale
 				if aps.header.D531_APSDoForcedSale$ = isYES$ {
 					BREAK	! Skip expiration check per user's choice.
 				}
 				! check for credit memos - they don't expire.
 				IF aps.header.invoiceType$ = "CM" { BREAK }		! #231968 - 2018-11-05 RCS

 				pt_found			= isFALSE
 				READ (c2p.ArPaytypeFH,REC=PT$,key=aps.header.PaymentType$,dom=*next); pt_found	= isTRUE
 				if pt_found and pos(pt.PaymentMethod$="R") {
 					cSeqNoBeg$		= "000000"
 					cSeqNoEnd$		= "999999"
 					cTempDep		= 0
 					SELECT *,REC=PAY$ from c2p.SoInvPayFH					\
 						BEGIN	aps.header.InvoiceNo$:cSeqNoBeg$	+ $00$	\
 						END		aps.header.InvoiceNo$:cSeqNoEnd$	+ $FE$	\
 						WHERE	pay.PaymentTypeCategory$			= "P"	\
 						AND		pay.TransactionAmt							\
 						AND		not(nul(pay.AuthorizationDate$))

 						today$		= dte(0:"%Yl%Mz%Dz")
 						tYear		= num(today$(1,4))
 						tMonth		= num(today$(5,2))
 						tDay		= num(today$(7))
 						todayJD 	= jul(tYear,tMonth,tDay)
 						aYear		= num(mid(pay.AuthorizationDate$,1,4))
 						aMonth		= num(mid(pay.AuthorizationDate$,5,2))
 						aDay		= num(mid(pay.AuthorizationDate$,7,2))
 						authJD		= jul(aYear,aMonth,aDay)
 						aDays		= authJD + pt.PreAuthorizationTerm
 						expDate$	= dte(adays:"%Mz/%Dz/%Yl")
 						if authJD	+ pt.PreAuthorizationTerm < todayJD {
	 						if not(coSession'Updating) { ! only write errors for the journal log during scan.
								cErrorsExist	= isTRUE
								errString$		= "B0"
								errorDesc$		= "APS Preauthorization for "+aps.header.InvoiceNo$+" expired on " + expDate$
								IF cBatchFlag$	= isYES$ {
									ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$+" ("+BatchNo$+")",errorDesc$)
								} ELSE {
									ErrorLog'WriteError(errString$,c2p.header.InvoiceNo$,errorDesc$)
								}
								ErrorText$		= isNULL$
								errString$		= isNULL$
							} ! log error
 						} ! date check
 					NEXT RECORD
 				} ! payment check
 				BREAK
 		END SWITCH
 	} ! expiration date processing
RETURN retVal
!

PRE_TABLE_WRITE:
ENTER (asiTableName$)	! #252126 - 2019-05-17 RCS

	retVal = _OBJ'PreTableWrite(FROM "SO_531APSSalesJournal_UPD_base", asiTableName$)	! #252126 - 2019-05-17 RCS

	IF retVal and c2p.Enabled {
		IF UCS(asiTableName$)=UCS("AR_InvoiceHistoryHeader") and coSession'Updating {	! #252126 - 2019-05-17 RCS

			if nul(c2p.D531_C2PLinkCode$) {
				ihh.D531_C2PLinkCode$		= c2p.D531_C2PLinkCode$
				ihh.D531_C2PWebInvUpdated$	= isNO$
				ihh.D531_C2PWebInvCreated$	= isNO$
			} else {
				ihh.D531_C2PLinkCode$		= c2p.D531_C2PLinkCode$
				ihh.D531_C2PWebInvUpdated$	= isYES$
				ihh.D531_C2PWebInvCreated$	= isYES$
			}
		}
	}
	IF retVal AND APSActivated { ! #231968 - 2018-05-15 RCS - Expiration date processing.
 		IF UCS(asiTableName$)=UCS("AR_InvoiceHistoryHeader") and coSession'Updating {	! #252126 - 2019-05-17 RCS
			if nul(ihh.D531_APSDoExpiredCapture$) {
				ihh.D531_APSDoExpiredCapture$	= isNO$
			}
			if nul(ihh.D531_APSDoForcedSale$) {
				ihh.D531_APSDoForcedSale$		= isNO$
			}
 		}
 	}
RETURN retVal
!

PROCESS_CREDIT_CARD_TRANS: ! complete override - no call back to base!

	coSession'Updating	= isTRUE
	ccObj				= new("AR_CreditCard",coSession)

	! Memory:  WRITE (cCCPostingFH,KEY=tmpKey$)InvoiceNo$, PaymentSeqNo$, ccType$, ccPostingAmount
	SELECT tmpInvoiceNo$, tmpPaymentSeqNo$, tmpCCType$, tmpCCPostingAmount FROM cCCPostingFH BEGIN $$
		tmpRetVal = coInvoice'SetKey( tmpInvoiceNo$ )

		IF tmpRetVal = retSUCCESS {
			coInvoice'GetRecord( tmpRec$, tmpIOL$ )
			READ DATA FROM tmpRec$, REC=hdr$ TO IOL=tmpIOL$

			coInvoice'PaymentObj'SetKeyValue( "InvoiceNo$", tmpInvoiceNo$ )
			coInvoice'PaymentObj'SetKeyValue( "PaymentSeqNo$", tmpPaymentSeqNo$ )
			tmpRetVal = coInvoice'PaymentObj'SetKey()

			IF tmpRetVal = retSUCCESS {
				coInvoice'PaymentObj'GetRecord( tmpRec$, tmpIOL$ )
				READ DATA FROM tmpRec$,REC=payment$ TO IOL=tmpIOL$

				! check if a void of a previous post auth or ACH payment needs to be done
				IF payment.PostAuthorizationProcessed$ = isYES$ OR \
				   ( tmpCCType$ = "3" AND NOT(NUL(payment.CreditCardAuthorizationNo$)) ) {
					IF payment.PaymentTypeCategory$ = "P" {
						IF tmpCCPostingAmount <> payment.TransactionAmt { ! process void for original post auth
							transactionType$ = "04" ! void
							void             = isTRUE

							IF procError {
								retVal = retFAILURE
							} ELSE {
								retVal = coInvoice'PaymentObj'ProcessCreditCard( void, transactionType$, isNULL$ )
							}

							IF NOT(retVal) {
								IF procError OR coInvoice'PaymentObj'LastErrorNum$ = "AR_NoSEDesktop" \
								             OR coInvoice'PaymentObj'LastErrorNum$ = "AR_NoInternet" {
									procError 	= isTRUE
									procMsg$ 	= TBL(NUL(procMsg$), procMsg$, coInvoice'PaymentObj'LastErrorMsg$)
								} ELSE {
									procMsg$ = coInvoice'PaymentObj'LastErrorMsg$
								}
								cErrorsExist	= isTRUE
								errString$		= "00"
								errorDesc$		= "Sage Exchange Payment Transaction Errors"
								tmpCustomerNo$	= TBL(cDivisions$=isYES$, hdr.CustomerNo$, hdr.ARDivisionNo$ + "-" + hdr.CustomerNo$)
								! Error message too long. Remove the first sentence.
								msgStart		= MAX(1, POS("the message returned by sage exchange" = LCS(procMsg$)))
								errorText$		= "Invoice No/Customer No: " + hdr.InvoiceNo$ + " / " + tmpCustomerNo$ + " " + SUB(MID(procMsg$, msgStart), SEP, " ")
								ErrorLog'WriteError(errString$, errorText$, errorDesc$)
								CONTINUE	! if the void of the post auth fails, skip to next iteration of the loop
							} ELSE {
								! ProcessCreditCard() clears all credit card fields.  Restore them then clear authorization fields only.
								coInvoice'PaymentObj'SetPartialRecord( tmpRec$, tmpIOL$ )
								coInvoice'PaymentObj'SetValue( "PostAuthorizationProcessed$", isNO$ )
								coInvoice'PaymentObj'SetValue( "CreditCardAuthorizationNo$", isNULL$ )
								coInvoice'PaymentObj'GetRecord( tmpRec$, tmpIOL$ )
								READ DATA FROM tmpRec$, REC=payment$ TO IOL=tmpIOL$
							}
						}
					}
				}

				! Force to sale
				if hdr.D531_APSDoForcedSale$ = isYES$ {
					retval	= ccObj'VoidPreAuth(payment.PaymentType$,payment.CreditCardTransactionID$,APSStatus$) ! void this transaction ID.
					if retVal and APSStatus$ = "SUCCESS" {
						payment.CreditCardTransactionID$	= isNULL$ ! force to null for sale
					}
				}
				
				IF procError {
					retVal	= retFAILURE
				} ELSE {
					IF tmpCCPostingAmount <> payment.TransactionAmt {
						coInvoice'PaymentObj'SetValue( "TransactionAmt", tmpCCPostingAmount )
					}
					IF hdr.InvoiceType$ = "CM" {
						IF NUL(payment.CreditCardTransactionID$) {
							transactionType$ = "07" ! credit without reference
						} ELSE {
							transactionType$ = "06" ! credit
						}
					} ELSE {
						IF payment.PaymentTypeCategory$ = "D" {
							transactionType$ = "01" ! sale
						} ELSE {
							IF NUL(payment.CreditCardTransactionID$) OR tmpCCType$ = "3" {
								transactionType$ = "01" ! sale
								! clear any authorization code so that a new transaction will be processed
								IF NOT(NUL(payment.CreditCardAuthorizationNo$)) {
									coInvoice'PaymentObj'SetValue( "CreditCardAuthorizationNo$", isNULL$ )
									coInvoice'PaymentObj'SetValue( "CreditCardTransactionID$", isNULL$ )
								}
							} ELSE {
								transactionType$ = "03" ! capture
							}
						}
					}
					retVal = coInvoice'PaymentObj'ProcessCreditCard( (isFALSE), transactionType$, isNULL$ )
				}

				IF NOT(retVal) {
					IF procError OR coInvoice'PaymentObj'LastErrorNum$ = "AR_NoSEDesktop" \
					             OR coInvoice'PaymentObj'LastErrorNum$ = "AR_NoInternet" {
						procError 	= isTRUE
						procMsg$ 	= TBL(NUL(procMsg$), procMsg$, coInvoice'PaymentObj'LastErrorMsg$)
					} ELSE {
						procMsg$ = coInvoice'PaymentObj'LastErrorMsg$

						coInvoice'PaymentObj'GetValue("CreditCardTrackingID$", ccTrackingID$)
						IF ccTrackingID$ <> payment.CreditCardTrackingID$ {
							coInvoice'PaymentObj'Write()
							coInvoice'Write()
						}
					}

					cErrorsExist	= isTRUE
					errString$		= "00"
					errorDesc$		= "Sage Exchange Payment Transaction Errors"
					tmpCustomerNo$	= TBL(cDivisions$=isYES$, hdr.CustomerNo$, hdr.ARDivisionNo$ + "-" + hdr.CustomerNo$)
					! Error message too long. Remove the first sentence.
					msgStart		= MAX(1, POS("the message returned by sage exchange" = LCS(procMsg$)))
					errorText$		= "Invoice No/Customer No: " + hdr.InvoiceNo$ + " / " + tmpCustomerNo$ + " " + SUB(MID(procMsg$, msgStart), SEP, " ")
					ErrorLog'WriteError(errString$, errorText$, errorDesc$)
				} ELSE {
					coInvoice'PaymentObj'SetValue( "PostAuthorizationProcessed$", isYES$ )
					coInvoice'PaymentObj'GetRecord( tmpRec$, tmpIOL$ )
					READ DATA FROM tmpRec$,REC=payment$ TO IOL=tmpIOL$

					! Update deposit recap with cc authorization info
					READ DATA FROM $$, REC=dep$ TO IOL=IOL(cDailyDepositWrkFH)
					EXTRACT (cDailyDepositWrkFH, KEY=hdr.ARDivisionNo$:hdr.PaymentType$:hdr.InvoiceNo$, REC=dep$, TIM=0, DOM=*NEXT)
					_OBJ'PostTableRead( "SO_DailyDepositRecapWrk" )

					IF payment.PaymentTypeCategory$ = "D" {   ! Deposit
						dep.AuthorizationCodeForDeposit$ = payment.CreditCardAuthorizationNo$
					} ELSE {
						dep.CreditCardAuthorizationNo$ 	 = payment.CreditCardAuthorizationNo$
					}

					IF _OBJ'PreTableWrite( "SO_DailyDepositRecapWrk:001" ) {
						WRITE (cDailyDepositWrkFH)
					}

					coInvoice'PaymentObj'Write() ! write payment record
					coInvoice'Write() 			 ! write header and commit payment record changes
				}
			}
		}
	NEXT RECORD

	coSession'Updating		= isFALSE
	drop object ccObj,err=*next
	ccObj					= 0

	! no call back to base:  retVal = _OBJ'ProcessCreditCardTrans(FROM "SO_531APSSalesJournal_UPD_base")
	
RETURN retVal
!

UPLOAD_PAYMENTS: ! Check each payment to insure the payments are all included on the ClickToPay Gateway.

	c2p.timeStamp$			= DTE(0, TIM:"%Y-%Mz-%DzT%Hz:%mz:%sz")

	memoryFH				= coRequest'CreateMemoryFile()

	documentCode$			= "IP###Q"
	
	coDocument'FIND(documentCode$)
	coDocument'GetValue("documentPath$", documentPath$)

	coRequest'LoadHeader()

	retVal = coRequest'SendRequest(documentCode$, documentPath$, memoryFH)

	coRequest'LoadResponse()
	
	SWITCH retVal
		CASE retSUCCESS ! was able to send the request and get an answer
			IF c2p.statusClassCode = retSUCCESS {
				! do nothing
			}
			BREAK
		CASE retWARNING ! was able to send the request and get an answer
			IF NOT(coRequest'TlsWarning) {
				coRequest'TlsWarning()
			}
			IF c2p.statusClassCode = retSUCCESS {
				! do nothing
			}
			BREAK

		DEFAULT
			! failed to send transaction!
			if not(coSession'Updating) {
				tInvoiceNo$ = c2p.header.invoiceNo$ + c2p.header.invoiceType$		! DB# 1289 - 2020-03-12 - RCS
				_obj'LogFailedTransaction(isTrue,"A1")
			}

			BREAK
	END SWITCH

	! catch errors during update and generate the log.
	IF c2p.statusClassCode 		> 1 and retVal { ! #232007 - 2018-07-05 RCS
		tInvoiceNo$				= c2p.header.invoiceNo$ + c2p.header.invoiceType$		! DB# 1289 - 2020-03-12 - RCS
		%APS_C2P_ErrorsExist	= isTRUE
		cErrString$				= "SO SalesJournal Payment "+tbl(not(coSession'Updating),"Updating","Scanning") ! change to handle coSession'Updating returning a value > 1 2018-05-02 RCS
		SWITCH int(c2p.statusCode)
			CASE 30001 ! Skip not on file but log.  Should not be getting this.
				_obj'LogFailedTransaction(isFalse,cErrString$)
				BREAK
			CASE 30003 ! skip not on file. #232007 - 2018-02-19 RCS
				BREAK
			DEFAULT
				if not(coSession'Updating) { 
					_obj'LogFailedTransaction(isTrue,cErrString$)
				} else {
					_obj'LogFailedTransaction(isFalse,cErrString$)
				}
				BREAK
		END SWITCH
	}

	IF retVal = retFAILURE and coSession'Updating {
		tInvoiceNo$				= c2p.header.invoiceNo$ + c2p.header.invoiceType$		! DB# 1289 - 2020-03-12 - RCS
		%APS_C2P_ErrorsExist	= isTRUE
		cErrString$				= "SO SalesJournal Payment Updating"
		_obj'LogFailedTransaction(isFalse,cErrString$)
	}

	c2p.BlocksProcessed			++
	if c2p.BlocksProcessed > 50 {
		coRequest'ResetDotNet()
		c2p.BlocksProcessed		= 0
	}

RETURN retVal
!
