! FETools - used to open, read and write SQL tables
! Copyright 2017 (C) by Accounting Systems Inc. (ASI) All rights reserved.
! ** @Author asiadmin
! ** @Date 2012.03.27 13 at 06:24:46 PM EDT 
! RCS 2017-08-06
 
DEF CLASS "FETools"  CREATE On_Create REQUIRED  DELETE On_Delete REQUIRED  

	LOCAL			cSQLDSN$=%SQLDSN$ !"FirstEnergy"
	LOCAL			cSQLUser$=%SQLUser$ ! ""
	LOCAL			cSQLPassword$=%SQLPassword$ ! ""
	LOCAL			cSQLDatabase$=%SQLDatabase$ ! "FE_OH"
	PROPERTY		cLogFile$
	LOCAL			cErrorLogFile$=""
	LOCAL			toolsErrorCount
	LOCAL			cXMLFile$=""
	LOCAL			cXMLLogLimit = 10
	LOCAL			cXMLLogCount
	LOCAL			oWs ! Web service object
	LOCAL 			cDefaultBase36Length = 3
	
	LOCAL			FedExServer$="fedex.amconservationgroup.com"
	LOCAL			FedExPort$="2000"
	LOCAL			FedExTemplate$
	LOCAL			FedExCHN
	LOCAL			reprint ! PLW 2012/05/30 added to FedExShip method FEDEX_SHIP
	
	LOCAL			cUSPSStandardize$ ! holds address standardization template
	LOCAL			coExplorer ! holds object for shell.explorer
	
	LOCAL 			Task$ ! passed in ON_CREATE to tag log files
	
	PROPERTY		LastErrorMsg$
	PROPERTY		LastErrorNo
	PROPERTY		LastOSError$

	FUNCTION	OpenTable(Tablename$,Keyfield$)								OPEN_TABLE
	FUNCTION	OpenTable(Tablename$,KeyField$,Database$)					OPEN_TABLE
	FUNCTION	LogMessage(Message$)										LOG_MESSAGE
	FUNCTION	LogError(Message$)											LOG_ERROR
	FUNCTION	LogXML(XMLString$)											LOG_XML
	FUNCTION	Base36$(Count,Length)										BASE_36_CONVERSION
	FUNCTION	WebService(uploadURL$,uploadData$,uploadIOL$,WSResponse$,WSResponseIOL$, \
				SOAPtemplate$,Certificate$,SOAPAction$)						WEB_SERVICE
	FUNCTION	GetPrinterList(printList$)									GET_PRINTER_LIST
	FUNCTION	DateDiff(FromDate$,ToDate$)									DATE_DIFF
	FUNCTION	BusinessDateDiff(FromDate$,ToDate$)							BUSINESS_DATE_DIFF
	FUNCTION	TestDate(TestDate$,retYear,retMonth,retDay,retJul)			TEST_DATE
	FUNCTION	DisplayLog()												DISPLAY_LOG
	FUNCTION	DisplayErrorLog()											DISPLAY_ERROR_LOG
	
	FUNCTION	FedExShip(ShipRec$,ShipIOL$,Error$,weight,selectedPrinter$,ReprintFlag$)	FEDEX_SHIP ! PLW 2012/05/30 added reprint flag
	FUNCTION	FedExEndOfDay()												FEDEX_END_OF_DAY
	
	FUNCTION	SendEmail(Group$,Subject$,Text$,Attachment$) 				SEND_EMAIL
	FUNCTION	GetEmailAddresses(Group$,ToList$)							GET_EMAIL_ADDRESSES
	FUNCTION	SendErrorEmail()											SEND_ERROR_EMAIL
	
	FUNCTION LOCAL	ClearErrors()											CLEAR_ERRORS
	FUNCTION LOCAL	OpenLog(logFile$)										OPEN_LOG

	FUNCTION	ParseSOAP(SOAPXML$,tmpIOL$,tmpREC$,Status$)					PARSE_SOAP
	FUNCTION	GetNextTag(XML$,TAG$,DATA$)									GET_NEXT_TAG
	
	FUNCTION LOCAL AddTagToIOLIST(IOLIST$,Tag$)								ADD_TAG_TO_IOLIST
	FUNCTION LOCAL ParseIt(XMLBody$,fldPrefix$,fldIOLIST$,fldRecord$)		PARSE_IT
	FUNCTION	ScrubData$(tmpText$)										SCRUB_DATA
	FUNCTION	StandardizeAddress(StreetAddress$,Apt$,City$,State$,Zip$,Zip4$,ErrorDescription$)	STANDARDIZE_ADDRESS
	FUNCTION	ReplaceVariables(tmpRec$,tmpIOL$,textForm$,Response$)		REPLACE_VARIABLES

END DEF
!

On_Create:
ENTER task$,ERR=*NEXT
	cLogFile$ = %logPath$+Task$+"Activity"+DTE(0:"%Yl%Mz%Dz%Hz%mz%s")+".log"
	cErrorLogFile$=%logPath$+Task$+"Error"+DTE(0:"%Yl%Mz%Dz%Hz%mz%s")+".log"
	cXMLFile$=%logPath$+"XML"+DTE(0:"%Yl%Mz%Dz%Hz%mz%s")+".log"
RETURN
!

On_Delete:
	IF oWs {
		DROP OBJECT oWs,ERR=*NEXT
		oWs=0
	}
	IF FedExCHN {
		CLOSE(FedExCHN,ERR=*NEXT)
		FedExCHN=0
	}
	IF coExplorer {
		DROP OBJECT coExplorer,ERR=*NEXT
		coExplorer=0
	}
RETURN
!

CLEAR_ERRORS:
	LastErrorMsg$=""
	LastErrorNo=0
	LastOSError$=""
RETURN
!
	
OPEN_TABLE:
cSQLDatabase$=%SQLDatabase$
ENTER TableName$,KeyField$,cSQLDatabase$,ERR=*NEXT
	_obj'ClearErrors()
	ConString$="[odb]"+cSQLDSN$+";"
	IF NOT(NUL(TableName$)) {
		TableString$=TableName$
	}
	IF NOT(NUL(cSQLDatabase$)) {
		DBString$="DB="+cSQLDatabase$
	}
	IF NOT(NUL(cSQLUser$)) {
		UserString$="User="+cSQLUser$
		PasswordString$="Pswd="+cSQLPassword$
	}
	IF NOT(NUL(KeyField$)) {
		KeyString$="Key="+Keyfield$
	}
	ConString$+=TableString$+";"+DBString$+";"+UserString$+";"+PasswordString$+";"+KeyString$+";"
	ReturnChannel=-1
	IF NOT(NUL(TableName$)) {
		NewChannel=HFN; OPEN(NewChannel,IOL=*,ERR=*NEXT)ConString$; ReturnChannel=NewChannel
	} ELSE {
		NewChannel=HFN; OPEN(NewChannel,ERR=*NEXT)conString$; ReturnChannel=NewChannel
	}
	IF ReturnChannel<0 {
		LastErrorNo = ERR
		LastErrorMsg$ = MSG(ERR)
		LastOSError$ = MSG(-1)
	}
RETURN ReturnChannel
!

WEB_SERVICE:
ENTER uploadURL$,uploadData$,uploadIOL$,WSResponse$,WSResponseIOL$,SOAPtemplate$,Certificate$,SOAPAction$,ERR=*NEXT
	READ DATA FROM uploadData$ to IOL=uploadIOL$
	tmpTmp$=SOAPTemplate$
	P=0; newTemplate$=""
	REPEAT
		P=POS("~"=tmpTmp$)
		IF P {
			SOAPPacket$+=tmpTmp$(1,P-1); tmpTmp$=tmpTmp$(P+1)
			P1=POS("~"=tmpTmp$)
			Variable$=tmpTmp$(1,P1-1); tmpTmp$=tmpTmp$(P1+1)
			IF POS("$"=variable$) {
				value$=EVS(variable$)
			} ELSE {
				value$=STR(EVN(variable$))
			}
			SOAPPacket$+=value$
		}
	UNTIL P=0
	SOAPPacket$+=tmpTmp$; tmpTmp$=""
	IF cXMLLogLimit and cXMLLogCount<=cXMLLogLimit {
		_obj'LogXML(SOAPPacket$)
		cXMLLogCount++
	}
CALL "*PLUS/WEB/REQUEST",uploadURL$,SOAPPacket$,respBody$,respHeader$,type$,certificate$,SOAPAction$
	FaultCode$=""; FaultString$=""
	tmpRet=_OBJ'ParseSOAP(respBody$,WSResponseIOL$,WSResponse$,status$)
	READ DATA FROM WSResponse$ to IOL=WSResponseIOL$
	
	IF LEN(FaultCode$) {
		Emsg$="SOAP FaultCode="+FaultCode$+" FaultString="+FaultString$
		_OBJ'LogMessage(Emsg$)
		_OBJ'LogError(Emsg$)
		retVal = 0
	} ELSE {
		retVal = 1
	}
RETURN retVal
!
	
LOG_MESSAGE:
ENTER Message$
	logCHN=_OBJ'OpenLog(cLogFile$)
	IF logCHN>0 {
		LongMessage$=DTE(0:"%Yl/%Mz/%Dz %Hz:%mz")+"  "+Message$
		WRITE RECORD(logCHN)LongMessage$
		CLOSE(logCHN)
		retVal = 1
	}
RETURN retVal
!
	
LOG_ERROR:
ENTER Message$
	logCHN=_OBJ'OpenLog(cErrorLogFile$)
	IF logCHN>0 {
		LongMessage$=DTE(0:"%Yl/%Mz/%Dz %Hz:%mz")+"  "+Message$
		WRITE RECORD(logCHN)LongMessage$
		CLOSE(logCHN)
		toolsErrorCount++
		retVal = 1
	}
RETURN retVal
!
	
OPEN_LOG:
ENTER logName$
	LogCHN=-1
	retVal = 0
	newCHN=HFN; OPEN LOCK(newCHN,err=*NEXT)logName$; LogCHN=newCHN
	IF LogCHN<0 AND ERR=12 {
		SERIAL logName$,ERR=*NEXT
		newCHN=HFN; OPEN LOCK(newCHN,ERR=*NEXT)logName$; logCHN=newCHN
	}
RETURN logCHN
!
	
BASE_36_CONVERSION:
ENTER Count,Length,ERR=*NEXT
	COUNT=INT(COUNT)
	IF NOT(Length) {
		Length=MAX(cDefaultBase36Length,1)
	}
	WHILE INT(COUNT/(36^(Length-1)))>35
		Length++
	WEND
	cDefaultBase36Length=Length
	DIM W[Length],R[Length+1]
	Base36$=""
	R[1]=Count
	FOR I=1 to Length
		Factor=36^(Length-I)
		W[I]=INT(R[I]/Factor)
		R[I+1]=Mod(R[I],Factor)
		Base36$+=TBL(W[I]<10,CHR(W[I]+55),STR(W[I]))
	NEXT I
RETURN BASE36$
!

LOG_XML:
ENTER XMLString$
	logCHN=_OBJ'OpenLog(cXMLFile$)
	IF logCHN>0 {
		WRITE RECORD(logCHN)XMLString$
		CLOSE(logCHN)
		retVal = 1
	}
RETURN retVal
!
	
GET_PRINTER_LIST:
ENTER printerList$
!	WINPRT_SETUP DIRECTORY printerList$
	printerList$="FEDEX_1,FEDEX_2,FEDEX_3,FEDEX_4,FEDEX_5"
RETURN 1
!

FEDEX_END_OF_DAY:
	_obj'LogMessage("End of Day Starting")
	tmpCHN = HFN; OPEN(tmpCHN,ISZ=-1)"FedExEndOfDay.txt"
	READ RECORD(tmpCHN,SIZ=10000)FedExEndOfDayTemplate$
	CLOSE(tmpCHN)
	IF NOT(FedExCHN) {
		FedExCHN=HFN
		OPEN(FedExCHN)"[tcp]"+FedExServer$+";"+FedExPort$
	}
	WRITE(FedExCHN)FedExEndOfDayTemplate$
	resp$=""
	read(FedExCHN,tim=3,ERR=*NEXT)resp$
	Code2$="NO RESPONSE",Code3$="FedEx Server "+FedExServer$+";"+FedExPort$+" did not respond"

	if len(resp$) {
		tmp$=resp$
		Code1$="",Code2$="",Code3$=""
		REPEAT
			P=POS(QUO=tmp$,1,2)
			IF P {
				code$=tmp$(1,P),tmp$=tmp$(P+1)
				CodeValue$=EVS(code$(pos(","=code$)+1))
				Code$=code$(1,pos(","=code$)-1)
				CodeVar$="Code"+Code$
				VIA CodeVar$ = CodeValue$
			}
		UNTIL P=0
	}
	retVal = 1
	IF LEN(Code2$) {
		_obj'LogError("End of Day Error: "+Code2$+" - "+Code3$)
		_obj'LogMessage("End of Day Error: "+Code2$+" - "+Code3$)
		retVal=0
	}
	_OBJ'LogMessage("End of Date Complete")
RETURN retVal
!
	
FEDEX_SHIP:
	ReprintFlag$="N"
	reprint=0
ENTER ShipRec$,ShipIOL$,Error$,(weight),selectedPrinter$,ReprintFlag$,ERR=*NEXT
	reprint=(ReprintFlag$="Y")
	IF NOT(POS("\\"=selectedPrinter$)) {
		selectedPrinter$="\\127.0.0.1\"+selectedPrinter$
	}
	READ DATA FROM ShipRec$ to IOL=ShipIOL$
	weight=weight*100 ! FedEx assumes 2 decimal places
	if NUL(FedExTemplate$) {
		tmpCHN = HFN; OPEN(tmpCHN,ISZ=-1)"SmartPost020Template.txt"
		READ RECORD(tmpCHN,SIZ=100000)FedExTemplate$
		close(tmpCHN)
	}
	tmpTmp$=FedExTemplate$
	P=0, shipRecord$=""
	REPEAT
		P=POS("~"=tmpTmp$)
		IF P {
			shipRecord$+=tmpTmp$(1,P-1), tmpTmp$=tmpTmp$(P+1)
			P1=POS("~"=tmpTmp$)
			Variable$=tmpTmp$(1,P1-1), tmpTmp$=tmpTmp$(P1+1)
			IF POS("$"=variable$) {
				value$=EVS(variable$)
			} ELSE {
				value$=STR(EVN(variable$))
			}
			shipRecord$+=value$
		}
	UNTIL P=0
	shipRecord$+=tmpTmp$, tmpTmp$=""
	IF NOT(FedExCHN) {
		FedExCHN=HFN,OpenOK=0
		OPEN(FedExCHN,err=*next)"[tcp]"+FedExServer$+";"+FedExPort$; OpenOK=1
		if not(OpenOK) { ! #229864 - RCS - 2017-09-13
			MSGBOX "Unable to open or access the FedEx Server. Please try rebooting the server or contact support."
			Code2$="NO RESPONSE",Code3$="FedEx Server "+FedExServer$+";"+FedExPort$+" did not respond"
			error$=Code2$+" "+Code3$+" msg: "+msg(-1)
			attemptedShipDate$=DTE(0:"%Yl-%Mz-%Dz")
			shipErrorMessage$=error$
			ShipRec$=REC(ShipIOL$)
			retVal = 0
			RETURN
		}
	}

	WRITE(FedExCHN)shipRecord$
	resp$=""
	readCount=0
	REPEAT ! PLW 2012/09/20  added loop to get all the response.  When we changed to the FedEx box the transactions did not come in one group.
		tmpResp$=""
		read(FedExCHN,tim=30,ERR=*NEXT)tmpResp$
		readCount++
		Resp$+=tmpResp$

	UNTIL POS("99,"+QUO+QUO=resp$) OR readCount>10
	Code2$="NO RESPONSE",Code3$="FedEx Server "+FedExServer$+";"+FedExPort$+" did not respond"
	Code29$="", Code2418$="" ! Make sure we don't accidentally fill in tracking and DCN.

	Code1$="",Code2$="",Code3$="",Code2418$="",Code29$="" ! PLW 2012/07/02 moved to clear codes regardless of content of RESP$
	if len(resp$) {
		tmp$=resp$
		REPEAT
			P=POS(QUO=tmp$,1,2)
			IF P {
				code$=tmp$(1,P),tmp$=tmp$(P+1)
				CodeValue$=EVS(code$(pos(","=code$)+1))
				Code$=code$(1,pos(","=code$+",")-1) ! PLW 2012/05/29 added +"," to avoid error 47.   Must be getting a bad response from Fedex.
				CodeVar$="Code"+Code$
				VIA CodeVar$ = CodeValue$
			}
		UNTIL P=0
	}
	IF (NUL(Code29$) OR NUL(Code2418$)) AND NUL(Code2$) { ! PLW 2012/07/02 
		Code2$="Bad tracking numbers returned",Code3$=""
	}
	IF LEN(STP(Code2$)) {
		error$=Code2$+" "+Code3$
		attemptedShipDate$=DTE(0:"%Yl-%Mz-%Dz")
		shipErrorMessage$=error$
		retVal = 0
	} ELSE {
		orderTrackingNumber$=code29$
		IF NOT(REPRINT) {
			vendorCustPgmOrderShipDate$=DTE(0:"%Yl-%Mz-%Dz")
			custPrtcptnStartDate$=vendorCustPgmOrderShipDate$ ! PLW 2012/04/11
			daysToShip = _obj'DateDiff((orderReceivedDate$),(vendorCustPgmOrderShipDate$)) ! PLW 2012/08/05 Changed to use orderReceivedDate instead of downloaddate.
			businessDaysToShip = _obj'BusinessDateDiff((orderReceivedDate$),(vendorCustPgmOrderShipDate$)) ! PLW 2012/08/05 Changed to use orderReceivedDate instead of downloaddate.
		} ELSE {
			reshipDate$=DTE(0:"%Yl-%Mz-%Dz") ! PLW 2012/05/30
		}
		deliveryConfirmationNo$ = code2418$
		attemptedShipDate$=""
		shipErrorMessage$=""
		retVal = 1
		Error$=""
	}
	ShipRec$=REC(ShipIOL$)
RETURN retVal
!

DATE_DIFF:
ENTER FromDate$,ToDate$
	retFrom = _obj'TestDate(FromDate$,fromY,fromM,fromD,fromJul)
	retTo	= _obj'TestDate(ToDate$,toY,toM,toD,toJul)
	IF retFrom = 0 or retTo = 0 { RETURN 0 }
RETURN toJul-fromJul

BUSINESS_DATE_DIFF: ! Calc business days between two dates - exclude weekends PLW 2012/08/05
ENTER FromDate$,ToDate$
	retFrom = _obj'TestDate(FromDate$,fromY,fromM,fromD,fromJul)
	retTo	= _obj'TestDate(ToDate$,toY,toM,toD,toJul)
	IF retFrom = 0 or retTo = 0 { RETURN -1 }
	WHILE 1
		WeekDay=NUM(DTE(ToJul:"%W"))
		IF WeekDay<=5 {
			BREAK
		}
		ToJul++ ! if the end day is a Saturday or Sunday move it to the following Monday.
	WEND
	rawDays = toJul-fromJul
	businessDays=rawDays-(INT(rawDays/7)*2)
RETURN businessDays
!

TEST_DATE:
ENTER TestDate$,retYear,retMonth,retDay,retJul  ! Date must be YYYY-MM-DD or it's invalid
	TestDate$=SUB(TestDate$,"-","")
	TestDate$=SUB(TestDate$,"/","")
	retYear=0,retMonth=0,retDay=0
	IF LEN(TestDate$) <> 8 { RETURN 0 }
	retYear = NUM(TestDate$(1,4),ERR=*NEXT)
	retMonth = NUM(TestDate$(5,2),ERR=*NEXT)
	retDay = NUM(TestDate$(7,2),ERR=*NEXT)
	TestJul = 0; TestJul = JUL(retYear,retMonth,retDay,ERR=*NEXT)
	IF NOT(TestJul) {
		retYear=0,retMonth=0,retDay=0
		RETURN 0
	} ELSE {
		retJul=testJul
	}
RETURN 1
!
	
DISPLAY_LOG:
	IF LEN(cLogFile$) {
		logFound=0; tmpCHN=HFN; OPEN(tmpCHN,ERR=*NEXT)cLogFile$; logFound=1
		CLOSE(tmpCHN,ERR=*NEXT)
		IF logFound {
			SYSTEM_HELP cLogFile$
		}
	}
RETURN 1
!

DISPLAY_ERROR_LOG:
	IF LEN(cErrorLogFile$) {
		errFound=0; tmpCHN=HFN; OPEN(tmpCHN,ERR=*NEXT)cErrorLogFile$; errFound=1
		CLOSE(tmpCHN,ERR=*NEXT)
		IF errFound {
			MsgBox("WHOA!!  Errors encountered!  Error box will pop up now.")
			SYSTEM_HELP cErrorLogFile$
		}
	}
RETURN 1
!

SEND_EMAIL:
ENTER Group$,Subject$,Message$,Attachments$,ERR=*NEXT ! Group is used to determine recipients.  Text$ is the body of the email.
	ToAddress$=""
	_obj'GetEmailAddresses(Group$,ToAddress$)
	FromAddress$="support@asifocus.com"
	ReplyAddress$="support@asifocus.com"
	CCAddress$="" ! "support@asifocus.com"
	BCCAddress$=""
	Option$="N"
	SMTPServer$=%SMTPServer$+";"+%SMTPPort$+";"+%SMTPUser$+";"+%SMTPPassword$
	LineWrapsAt=-1
	BodyEncoding$=""
	ErrorMesg$=""
	EraseIT=2
	SendDirectory$=""
	SavedFileName$=""
	CALL "*WEB/EMAIL",err=*next,FROMADDRESS$,REPLYADDRESS$,TOADDRESS$,CCADDRESS$,BCCADDRESS$,SUBJECT$, \
		MESSAGE$,ATTACHMENTS$,OPTION$,SMTPSERVER$,SERVERTIMEOUT,LINEWRAPSAT,BODYENCODING$, \
		ERASEIT,ERRORMESG$,SENDDIRECTORY$,SAVEDFILENAME$
	retVal=1
	IF ErrorMesg$>"" {
		retVal=0
		_obj'LogError("!!! Error sending email: "+ErrorMesg$)
	}

RETURN retVal
!
	
GET_EMAIL_ADDRESSES:
ENTER Group$,ToList$
	If LEN(ToList$) {
		ToList$+=";"
	}
	EmailCHN = _OBJ'OpenTable("EmailAddresses","EmailAddress")
	SELECT * FROM EmailCHN BEGIN $$ END $FE$ WHERE POS(UCS(GROUP$)+","=UCS(GROUPS$)+",")
		toList$+=EmailAddress$+";"
	NEXT RECORD
	toList$=SUB(toList$,";;",";")
	if len(ToList$) { ! RCS #227656 20170807
		if mid(ToList$,-1)=";" {
			ToList$=mid(tolist$,1,len(ToList$)-1)
		}
	}
RETURN
!

SEND_ERROR_EMAIL:
	IF toolsErrorCount {
		_obj'SendEmail("ERROR",Task$+" Error "+DTE(0:"%Yl-%Mz-%Dz %Hz:%mz"),"Errors occurred during the "+Task$+".  See attached error log",cErrorLogFile$)
	}
RETURN 1
!

PARSE_SOAP:
ENTER response$,tmpIOL$,tmpREC$,status$
	retVal=1
	statusCode$ = ""
	tmpIOL$=CPL("IOLIST errorMsg$,response$")
	tmpRec$=""
	tmpIOLtxt$=""
	BodyStart=POS("<SOAP-ENV:BODY"=UCS(response$)); offset=14
	IF NOT(BodyStart) {
		BodyStart=POS("<SOAPENV:BODY"=UCS(response$)); offset=13
	}
	IF NOT(BodyStart) {
		BodyStart=POS("<ENV:BODY"=UCS(response$)); offset=10
	}
	IF NOT(BodyStart) {
		LastErrorMsg$ = "No response body found"
		errorMSG$ = LastErrorMsg$
		tmpREC$=REC(tmpIOL$)
		return 0
	}
	response$=response$(BodyStart+offset)
	IF POS(">"=response$)<POS("<"=response$) AND POS(">"=response$)>0 {
		response$=response$(POS(">"=response$)+1) ! remove the remainder of the SOAP Body begin tag
	}
	BodyEnd=POS("</SOAP-ENV:BODY>"=UCS(response$))
	IF NOT(BodyEnd) {
		BodyEnd=POS("</SOAPENV:BODY>"=UCS(response$))
	}
	IF NOT(BodyEnd) {
		BodyEnd=POS("</ENV:BODY>"=UCS(response$))
	}
	IF NOT(BodyEnd) {
		LastErrorMsg$ = "Invalid XML response - no body end"
		errorMsg$=LastErrorMsg$
		tmpREC$=REC(tmpIOL$)
		return 0
	}
	response$=response$(1,BodyEnd-1)
	XMLBody$=response$
	fldPrefix$=""
	fldIOLIST$=""
	fldRecord$=""

	_obj'ParseIt(XMLBody$,fldPrefix$,fldIOLIST$,fldRecord$)
	IF LEN(fldIOLIST$) {
		read data from fldRecord$ to IOL=fldIOLIST$
		tmpIOLtxt$=LST(fldIOLIST$) 
		tmpIOLTxt$=tmpIOLTxt$(8)
		tmpIOL$=fldIOLIST$
		tmpREC$ = REC(tmpIOL$)
		IF POS("FAULTCODE$"=UCS(tmpIOLTxt$)) {
			LastErrorMsg$ = errorDescription$
			TrackReply.TrackDetails.StatusCode$ = "FAILED"
		}
		if NOT(NUL(TrackReply.TrackDetails.StatusCode$)) {
			status$ = TrackReply.TrackDetails.StatusCode$ ! Status will return "FAILED" unless we get one back in SOAP response
		}
		retVal=1
	} ELSE {
		LastErrorMsg$ = "No fields found"
		errorMsg$=LastErrorMsg$
		tmpREC$=REC(tmpIOL$)
		retVal=0
	}
RETURN retVal
!
	
GET_NEXT_TAG:
ENTER XML$,TAG$,DATA$
	TAG$=""
	DATA$=""
	StartTag=POS("<"=XML$); EndTag=POS(">"=XML$)
	IF NOT(StartTag) OR NOT(EndTag) OR EndTag<StartTag {
		XML$=""
		RETURN 0
	}
	TAG$ = UCS(XML$(StartTag,EndTag-StartTag))+" "
	XML$=XML$(EndTag+1)
	TAG$ = TAG$(2)
	TAG$=TAG$(1,POS(" "=TAG$)-1)
	endTag$="</"+TAG$ ! PLW 2012/07/23	
	XML$ = STP(XML$,2)
	endTagPos=POS(endTag$+">"=UCS(XML$)) ! check for end tag with > first
	IF NOT(endTagPos) {
		endTagPos=POS(endTag$+" "=UCS(XML$)) ! check for end tag with space
	}
	IF endTagPos {
		DATA$=XML$(1,endTagPos-1)
		XML$=STP(XML$(endTagPos),2)
	} ELSE {
		TAG$="" ! Invalid tag if we don't have an end tag
	}
!	WHILE LEN(XML$) AND MID(XML$,1,1)<>"<"
!		IF XML$(1,1)>CHR(32) OR XML$(1,1)<CHR(127) {
!			DATA$+=XML$(1,1)
!			XML$=XML$(2)
!		}
!	WEND
	IF POS("/"=TAG$)=1 {
		TAG$="" ! we have an ending tag so no data to 
	} 
	TAG$=SUB(TAG$,"/","")
	tmpColon=POS(":"=Tag$)
	IF tmpColon {
		Tag$=Tag$(tmpColon+1)
	}		
	TAG$=STP(TAG$,3)
	IF NOT(NUL(TAG$)) {
		TAG$=STP(TAG$,2)+"$" ! Create string variable
	}

RETURN 1
!

Parse_It:
ENTER XMLBody$,fldPrefix$,fldIOLIST$,fldRecord$
	if LEN(fldIOLIST$) AND LEN(fldRecord$) {
		READ DATA FROM fldRecord$ to IOL=fldIOLIST$
		tmpIOLtxt$=LST(fldIOLIST$)
		tmpIOLtxt$=tmpIOLtxt$(8)
	}
	WHILE LEN(XMLBody$)
		IF _obj'GetNextTag(XMLBody$,Tag$,Data$) {
			IF NOT(NUL(TAG$)) {
				IF POS("<"=Data$) AND POS(">"=Data$) AND POS("/"=Data$) {
					fldPrefix$=fldPrefix$+TAG$(1,LEN(TAG$)-1)+"."
					prefixCtr=0
					fldPrefixRoot$=fldPrefix$(1,LEN(fldPrefix$)-1)
					WHILE POS(UCS(fldPrefix$)=UCS(tmpIOLtxt$))
						prefixCtr++
						fldPrefix$=fldPrefixRoot$+STR(prefixCtr)+"."
					WEND
					if MID(tmpIOLTxt$,1,1)="," {
						tmpIOLTxt$=tmpIOLTxt$(2)
					}
					IF LEN(tmpIOLTxt$) {
						fldIOLIST$=CPL("IOLIST "+tmpIOLTxt$)
						fldRecord$=REC(fldIOLIST$)
					}
					_OBJ'ParseIt(Data$,fldPrefix$,fldIOLIST$,fldRecord$)
					fldPrefix$=fldPrefix$(1,POS("."=fldPrefix$,-1,2))
					IF LEN(fldIOLIST$) {
						READ DATA FROM fldRecord$ to IOL=fldIOLIST$
						tmpIOLtxt$=LST(fldIOLIST$)
						tmpIOLtxt$=tmpIOLtxt$(8)
					}
				} ELSE {
					TAG$=fldPrefix$+Tag$
					_OBJ'AddTagToIOLIST(tmpIOLtxt$,TAG$)
					DATA$=SUB(DATA$,"&#xD;&#xD;",$0A$)
					DATA$=SUB(DATA$,"&#xD;",$0A$)
					VIA TAG$ = DATA$
				}
			}
		}
	WEND
	IF LEN(tmpIOLTxt$) {
		IF tmpIOLTxt$(1,1)="," {
			tmpIOLtxt$=tmpIOLtxt$(2)
		}
		fldIOLIST$=CPL("IOLIST "+tmpIOLTxt$)
		fldRecord$=REC(fldIOLIST$)
	}
RETURN 1
!
	
ADD_TAG_TO_IOLIST:
	ENTER IOLIST$,Tag$
	counter=0
	TagRoot$=Tag$(1,LEN(Tag$)-1)
	WHILE POS(UCS(Tag$)=IOLIST$) 
		counter++
		Tag$=TagRoot$+STR(counter)+"$"
	WEND
	IOLIST$+=","+Tag$
RETURN 1
!

SCRUB_DATA: ! translate html encoding
ENTER tmpText$
	tmpText$=SUB(tmpText$,"&amp;","&")
	tmpText$=SUB(tmpText$,"&quot;",QUO)
	tmpText$=SUB(tmpText$,"&lt;","<")
	tmpText$=SUB(tmpText$,"&gt;",">")
RETURN tmpText$
!

STANDARDIZE_ADDRESS:
ENTER StreetAddress$,Apt$,City$,State$,Zip$,ZIP4$,ErrorDescription$
	StreetAddress$=SUB(StreetAddress$,"#","Unit ")
	Apt$=SUB(Apt$,"#","Unit ")
	IF NUL(cUSPSStandardize$) {
		templateCHN=HFN; OPEN(templateCHN,isz=-1)"USPSAddressStandardization.txt"
		READ RECORD(templateCHN,siz=10000)cUSPSStandardize$
		CLOSE(templateCHN)
	}
	IF NOT(coExplorer) {
		DEF OBJECT coExplorer,"Shell.Explorer"
	}
	IF NUL(cUSPSStandardize$) or NOT(coExplorer) {
		RETURN 0
	}
	tmpIOL$=CPL("IOLIST StreetAddress$,Apt$,City$,State$,ZIP$")
	tmpREC$=REC(tmpIOL$)
	_OBJ'ReplaceVariables(tmpRec$,tmpIOL$,(cUSPSStandardize$),Request$)
	coExplorer'Navigate(Request$)
	WAIT 2
	D=NUM(coExplorer'Document$)
	E=NUM(D'DocumentElement$)
	Response$=STP(E'InnerText$),Xml_String$=Response$
	P=POS("<?XML"=UCS(XML_String$))
	IF P {
		P1=POS(">"=XML_String$)
		IF P1 {
			XML_String$=XML_String$(P1+1) ! Get rid of XML header
		}
	}
	srchTag$="<ADDRESSVALIDATERESPONSE>"
	P=POS(UCS(srchTag$)=UCS(XML_String$))
	IF P {
		XML_String$=XML_String$(P+LEN(srchTag$))
	}
	srchTag$="</ADDRESSVALIDATERESPONSE"
	P=POS(UCS(srchTag$)=UCS(XML_String$))
	IF P {
		XML_String$=XML_String$(1,P-1)
	}
	Address.ERROR.Description$=""
	Error.Description$=""
	ErrorDescription$=""
	_obj'ParseIt(XML_String$,fldPrefix$,fldIOLIST$,fldRecord$)
	READ DATA FROM fldRecord$ to IOL=fldIOLIST$
	IF NOT(NUL(Address.Error.Description$)) {
		Error.Description$=Address.Error.Description$
	}
	IF NOT(NUL(Error.Description$)) {
		ErrorDescription$=Error.Description$
		retVal=0
	} ELSE {
		retVal=1
		StreetAddress$=Address.Address2$
		IF NOT(NUL(Address.Address1$)) {
			Apt$=Address.Address1$
		}
		City$=Address.City$
		State$=Address.State$
		Zip$=Address.Zip5$
		Zip4$=Address.Zip4$
	}
RETURN retVal
!

REPLACE_VARIABLES:  ! Take text and replace tags (~xxx$~) with variables
ENTER tmpRec$,tmpIOL$,textForm$,Response$
		READ DATA FROM tmpRec$ to IOL=tmpIOL$
		tmpTmp$=textForm$
		P=0
		Response$=""
		REPEAT
			P=POS("~"=tmpTmp$)
			IF P {
				Response$+=tmpTmp$(1,P-1); tmpTmp$=tmpTmp$(P+1)
				P1=POS("~"=tmpTmp$)
				Variable$=tmpTmp$(1,P1-1); tmpTmp$=tmpTmp$(P1+1)
				IF POS("$"=variable$) {
					value$=EVS(variable$)
				} ELSE {
					value$=STR(EVN(variable$))
				}
				Response$+=value$
			}
		UNTIL P=0
		Response$+=tmpTmp$; tmpTmp$=""
RETURN 1
!
