! pvxtoxml.pvx - Convert a pvx data file to an xml file
! $Id: pvxtoxml.pvx.pvt 84 2009-04-07 20:09:08Z fred.mcguirk $
! Original code courtesy of J. Wilder - Megasys Hospitality Systems, Inc.
! 
CreateTextData:
ENTER (datafile$),(textfile$),(password$),(password_type$),status,ERR=Done
ENTER *,*,*,*,*,(aMonitor),ERR=*NEXT
! Allow IOLIST for data file to be passed as argument
ENTER *,*,*,*,*,*,file_iolist$,ERR=*NEXT
! Allow a key prefix to restrict records placed into the XML file
ENTER *,*,*,*,*,*,*,keyStart$,keyEnd$,ERR=*NEXT
ENTER *,*,*,*,*,*,*,*,*,noLockFile,ERR=*NEXT
status=-1
IF POS(".xml"=LCS(textfile$))=0 THEN textfile$+=".xml"
IF %debug_list_box THEN {
LIST_BOX LOAD %debug_list_box,0,datafile$+SEP+textfile$+SEP
 }
encodingcount=5
DIM encodinglist$[1:2,1:encodingcount]
encodinglist$[1,1]="&",encodinglist$[2,1]="&amp;"
encodinglist$[1,2]=QUO,encodinglist$[2,2]="&quot;"
encodinglist$[1,3]="<",encodinglist$[2,3]="&lt;"
encodinglist$[1,4]=">",encodinglist$[2,4]="&gt;"
encodinglist$[1,5]="'",encodinglist$[2,5]="&apos;"
eol$=$0A$
! 
OPEN (UNT,KEY=password$,ERR=*NEXT)datafile$; datafile=LFO
IF NOT(NUL(file_iolist$)) THEN {
SETDEV (datafile,ERR=OpenError)IOL=CPL(file_iolist$):*
hasiolist=1
IF NOT(noLockFile) THEN {
LOCK (datafile)
 }
GOTO TextFileOpen
 }
OPEN (UNT,IOL=*,REC=datapfx$,KEY=password$,ERR=OpenError)datafile$; temp=LFO,has_embedded_dd=1,hasiolist=1; CLOSE (datafile); datafile=temp
ContinueNoIolist:
IF NOT(noLockFile) THEN {
LOCK (datafile)
 }
GOTO TextFileOpen
OpenError:
IF datafile>0 THEN {
IF ERR=84 THEN {
GOTO ContinueNoIolist
 } ELSE {
CLOSE (datafile)
 }
 }
status=ERR; IF status=0 THEN status=15
GOTO Done
TextFileOpen:
OPEN (UNT,ERR=*NEXT)textfile$; textfile=LFO
IF textfile>0 THEN {
LOCK (textfile); PURGE (textfile)
 } ELSE {
! Create a text file where the XML information will be created
system=NEW("system")
x=system'makeserial(textfile$)
DELETE OBJECT system
! Abort of the text file cannot be created
IF NOT(x) THEN {
status=15
GOTO Done
 }
OPEN LOCK (UNT)textfile$; textfile=LFO
 }
! 
XMLVersion:
PRINT (textfile)FNxmltagopen$("?xml version=""1.0"" encoding=""iso-8859-1""?","")
XMLTable:
name$=PTH(datafile),name$=name$(POS(DLM=name$,-1)+1)
PRINT (textfile)FNxmltagopen$("table"," name="""+FNencoding$(name$)+"""")
IF aMonitor THEN aMonitor'setTaskDetail("Creating dictionary definition...")
GOSUB PVXDefinition
IF aMonitor THEN aMonitor'setTaskDetail("Write data records...")
GOSUB Records
PRINT (textfile)FNxmltagclose$("table")
CreateTextData_Done:
CLOSE (datafile)
CLOSE (textfile)
status=0
Done:
EXIT 
! 
Functions:
DEF FNxmltag$(LOCAL tag$, LOCAL attrs$, LOCAL value$)=FNxmltagopen$(tag$,attrs$)+FNencoding$(value$)+FNxmltagclose$(tag$)
DEF FNxmltagopen$(LOCAL tag$, LOCAL attrs$)="<"+tag$+attrs$+">"
DEF FNxmltagclose$(LOCAL tag$)="</"+tag$+">"
DEF FNencoding$(LOCAL value$)
LOCAL encodedtext$,encodingchar,x,x$
encodedtext$=value$
FOR encodingchar=1 TO encodingcount
encodedtext$=SUB(encodedtext$,encodinglist$[1,encodingchar],encodinglist$[2,encodingchar])
NEXT 
WHILE POS($20$>encodedtext$)
x=POS($20$>encodedtext$),x$=encodedtext$(x,1)
encodedtext$=SUB(encodedtext$,x$,"^#x"+HTA(x$)+";")
WEND 
WHILE POS($7E$<encodedtext$)
x=POS($7E$<encodedtext$),x$=encodedtext$(x,1)
encodedtext$=SUB(encodedtext$,x$,"^#x"+HTA(x$)+";")
WEND 
RETURN encodedtext$
END DEF
RETURN 
! 
PVXDefinition:
PRINT (textfile)FNxmltagopen$("schema"," type=""providex""")
type$=MID(FIB(datafile),19,1)
PRINT (textfile)FNxmltag$("type","",FNencoding$(type$))
IF type$="K" OR type$="2" THEN {
keysize$=FIN(datafile,"KSZ")
IF NUM(keysize$,ERR=*NEXT) THEN PRINT (textfile)FNxmltag$("keysize","",keysize$)
 }
PRINT (textfile)FNxmltag$("maxrecords","",FIN(datafile,"MAXREC"))
temp=NUM(FIN(datafile,"RSZ"))
IF AND(MID(FIB(datafile),17,1),$01$)=$01$ THEN temp=-temp
PRINT (textfile)FNxmltag$("recordsize","",STR(temp))
IF type$="K" OR type$="2" THEN {
GOSUB PVXFilePassword
GOSUB PVXDefinitionKeys
GOSUB PVXEmbeddedDictionary
 }
PRINT (textfile)FNxmltagclose$("schema")
RETURN 
! 
PVXDefinitionKeys:
LOCAL r$,k_inf$,k_no,k_fld,k_ofs,k_len,k_opt$,k_1$,k_3$,k_dsc$
LOCAL k_fld$,k_len$,k_nme$,i,a$,k_nme$,dict_kno,keys$
! Is this a sort file?
IF NOT(NUM(FIN(datafile,"RSZ"))) THEN RETURN 
! Get list of key names
i=0; DIM key_names$[16]
Next_Keyname:
DICTIONARY READ (datafile,IND=++i,ERR=Done_Keynames)a$,k_nme$
IF MID(a$,1,3)="key" THEN dict_kno=NUM(a$(4,3)),key_names$[dict_kno]=k_nme$
GOTO Next_Keyname
Done_Keynames:
r$=FIB(datafile)
IF r$(85,4)=$00000000$ AND r$(11,1)<>$00$ THEN RETURN
k_inf$=r$(85,384)+$FF$
WHILE k_inf$(1,1)<>$FF$
k_no=DEC(AND(k_inf$(1,1),$0F$))
k_fld=DEC($00$+k_inf$(2,1))
k_ofs=16*DEC($00$+AND($F0$,k_inf$(1,1)))+DEC($00$+k_inf$(3,1))
k_len=DEC($00$+k_inf$(4,1))
k_opt$="",k_1$=""
IF k_inf$(5,1)=$FE$ THEN {
k_1$=k_inf$(7,1)+k_inf$(6,1),k_3$=k_inf$(8,1),k_inf$=k_inf$(9)
 } ELSE {
k_inf$=k_inf$(5)
 }
IF LEN(k_1$) THEN {
IF AND(k_1$,$0001$)=$0001$ THEN k_opt$+="U"
IF AND(k_1$,$0002$)=$0002$ THEN k_opt$+="C"
IF AND(k_1$,$0004$)=$0004$ THEN k_opt$+="L"
IF AND(k_1$,$0008$)=$0008$ THEN k_opt$+="T"
IF AND(k_1$,$0010$)=$0010$ THEN k_opt$+="S"
IF AND(k_1$,$0020$)=$0020$ THEN k_opt$+="M"
IF AND(k_1$,$0040$)=$0040$ THEN k_opt$+="N:"+HTA(k_3$)
IF AND(k_1$,$0100$)=$0100$ THEN k_opt$+="K:"+HTA(k_3$)
IF AND(k_1$,$0200$)=$0200$ THEN k_opt$+="I"
IF AND(k_1$,$0400$)=$0400$ THEN k_opt$+="Z"
IF AND(k_1$,$0800$)=$0800$ THEN k_opt$+="+"
IF AND(k_1$,$1000$)=$1000$ THEN k_opt$+="#"
 }
IF k_no=0 AND k_fld=255 THEN CONTINUE
IF k_fld=255 THEN {
k_fld$="key"
 } ELSE {
k_fld$=STR(k_fld)
 }
IF k_len>128 THEN {
k_len$=STR(k_len-128),k_opt$=k_opt$+"D"
 } ELSE {
k_len$=STR(k_len)
 }
IF k_opt$<>"" THEN k_opt$=":"+""""+k_opt$+""""
k_nme$=""
IF has_embedded_dd THEN {
IF key_names$[k_no]<>"" THEN {
k_nme$=""""+key_names$[k_no]+""""+":"
 }
 }
IF sv_kno=k_no THEN k_nme$=""
k_dsc$=k_dsc$+"+["+k_nme$+k_fld$+":"+STR(k_ofs+1)+":"+k_len$+k_opt$+"]"
IF k_inf$(1,1)<>$FF$ AND DEC(AND(k_inf$(1,1),$0F$))=k_no THEN CONTINUE
keys$+=eol$+FNxmltag$("key"," id="""+STR(k_no)+"""",k_dsc$(2))
k_dsc$=""
WEND 
IF NOT(NUL(keys$)) THEN {
keys$=MID(keys$,1+LEN(eol$))
PRINT (textfile)FNxmltagopen$("keys"," count="""+STR(k_no)+"""")
PRINT (textfile)keys$
PRINT (textfile)FNxmltagclose$("keys")
 } ELSE {
temp=NUM(FIN(datafile,"key_size"))
IF temp>0 THEN {
PRINT (textfile)FNxmltag$("externalkey","",STR(temp))
 }
 }
RETURN 
! 
PVXFilePassword:
IF NUL(password$) THEN RETURN 
PRINT (textfile)FNxmltagopen$("password"," type="""+password_type$+"""")
PRINT (textfile)password$
PRINT (textfile)FNxmltagclose$("password")
RETURN 
! 
ddf_iol: IOLIST ddf.name$,ddf.when$,ddf.who$,ddf.file_proc$,ddf.owner$,ddf.lst_phys_upd$,ddf.file_desc$,ddf.file_group$,ddf.file_extension$,ddf.altiolist$,ddf.sep$,ddf.file_sec$,ddf.file_notes$,ddf.file_options$,ddf.version$,ddf.blocksize$
dde_iol: IOLIST dde.iolobj$,dde.name$,dde.desc$,dde.type$,dde.len$,dde.occ$,dde.format$,dde.valid$,dde.print$,dde.help$,dde.notes$,dde.keydef$,dde.query$,dde.class$,dde.flags$,dde.dflt$,dde.alt_name$,dde.user_tag$,dde.elem_sec$,dde.elem_extension$,dde.elem_originator$
! 
PVXEmbeddedDictionary:
LOCAL columns$,temp$,column$,element,elements$
IF NOT(has_embedded_dd) THEN RETURN 
! 
PRINT (textfile)FNxmltagopen$("dictionary","")
DICTIONARY READ (datafile,IND=0)IOL=ddf_iol
DIM temp$:IOL=ddf_iol
columns$=LCS(MID(LST(IOL(temp$)),8))
WHILE NOT(NUL(columns$))
x=POS(","=columns$)
IF x THEN {
column$=columns$(1,x-1),columns$=columns$(x+1)
 } ELSE {
column$=columns$,columns$=""
 }
column$=column$(1,LEN(column$)-1)
PRINT (textfile)FNxmltag$(column$(POS("."=column$)+1),"",VIS(column$))
WEND 
! 
Next_Element:
DICTIONARY READ (datafile,IND=++element,ERR=Done_Elements)IOL=dde_iol
DIM temp$:IOL=dde_iol
columns$=LCS(MID(LST(IOL(temp$)),8))
elements$+=eol$+FNxmltagopen$("element"," id="""+STR(element)+"""")
WHILE NOT(NUL(columns$))
x=POS(","=columns$)
IF x THEN {
column$=columns$(1,x-1),columns$=columns$(x+1)
 } ELSE {
column$=columns$,columns$=""
 }
column$=column$(1,LEN(column$)-1)
elements$+=eol$+FNxmltag$(column$(POS("."=column$)+1),"",VIS(column$))
WEND 
elements$+=eol$+FNxmltagclose$("element")
GOTO Next_Element
Done_Elements:
elements$=MID(elements$,1+LEN(eol$))
PRINT (textfile)FNxmltagopen$("elements"," count="""+STR(element)+"""")
PRINT (textfile)elements$
PRINT (textfile)FNxmltagclose$("elements")
! 
! Negative elements
element=0,elements$=""
WHILE 1
DICTIONARY READ (datafile,IND=--element,ERR=*BREAK)IOL=dde_iol
DIM temp$:IOL=dde_iol
columns$=LCS(MID(LST(IOL(temp$)),8))
elements$+=eol$+FNxmltagopen$("nelement"," id="""+STR(element)+"""")
WHILE NOT(NUL(columns$))
x=POS(","=columns$)
IF x THEN {
column$=columns$(1,x-1),columns$=columns$(x+1)
 } ELSE {
column$=columns$,columns$=""
 }
column$=column$(1,LEN(column$)-1)
elements$+=eol$+FNxmltag$(column$(POS("."=column$)+1),"",VIS(column$))
WEND 
elements$+=eol$+FNxmltagclose$("nelement")
WEND 
IF element THEN {
elements$=MID(elements$,1+LEN(eol$))
PRINT (textfile)FNxmltagopen$("nelements"," count="""+STR(ABS(element))+"""")
PRINT (textfile)elements$
PRINT (textfile)FNxmltagclose$("nelements")
 }
PRINT (textfile)FNxmltagclose$("dictionary")
RETURN 
! 
Records:
PRINT (textfile)FNxmltagopen$("rows","")
SWITCH hasiolist
CASE 1
GOSUB KeyedIolist
BREAK
DEFAULT 
IF type$="K" OR type$="2" THEN {
IF NUM(FIN(datafile,"RSZ")) THEN {
GOSUB KeyedNoIolist
 } ELSE {
GOSUB Sort
 }
 }
IF type$="I" THEN GOSUB Indexed
END SWITCH 
PRINT (textfile)FNxmltagclose$("rows")
RETURN 
! 
KeyedIolist:
LOCAL columns$,x,y,count,rowattrs$,columns,column,value$
columns$=LCS(MID(LST(IOL(datafile)),8))
WHILE POS(":["=columns$)
x=POS(":["=columns$)
y=POS("]"=columns$(x))
columns$=SUB(columns$,columns$(x,y),"")
WEND 
DIM columns$[POS(","=columns$,1,0)]
READ DATA FROM columns$ TO IOL=CPL("IOLIST Columns${all}:[str("","")]")
columns=DIM(READ MAX(columns$))
IF NUL(keyEnd$) THEN {
SELECT *,REC=datapfx$ FROM datafile
GOSUB WriteData
NEXT RECORD 
 } ELSE {
SELECT *,REC=datapfx$ FROM datafile BEGIN keyStart$ END keyEnd$
GOSUB WriteData
NEXT RECORD 
 }
IF aMonitor AND MOD(count,10)=0 THEN aMonitor'setTaskDetail("Write data records ("+STR(count)+")...")
RETURN 
WriteData:
count++
rowattrs$=" key="""+FNencoding$(KEC(LFA))+""""
PRINT (textfile)FNxmltagopen$("row",rowattrs$)
FOR column=0 TO columns
IF POS("$"=columns$[column]) THEN {
value$=EVS("DataPfx."+columns$[column])
 } ELSE {
value$=STR(EVN("DataPfx."+columns$[column]))
 }
PRINT (textfile)FNxmltag$(SUB(columns$[column],"$",""),"",value$)
NEXT column
PRINT (textfile)FNxmltagclose$("row")
RETURN 
! 
KeyedNoIolist:
LOCAL separator$,keyvalue$,columns$,count,rowattrs$,columns,column
LOCAL x,value$
separator$=FIN(datafile,"SEPARATOR")
keyvalue$=$FF$,keyvalue$=KEY(datafile,END=*NEXT)
WHILE keyvalue$<>$FF$
READ RECORD (datafile,KEY=keyvalue$)columns$
columns$=STP(columns$,1,$00$)
columns=POS(separator$=columns$,1,0),column=0
count++
rowattrs$=" key="""+FNencoding$(keyvalue$)+""""
IF MID(columns$,-1)<>separator$ THEN rowattrs$+=" sep=""N""",columns+=1
PRINT (textfile)FNxmltagopen$("row",rowattrs$)
WHILE column++<columns
x=POS(separator$=columns$)
IF x THEN {
value$=columns$(1,x-1),columns$=columns$(x+LEN(separator$))
 } ELSE {
value$=columns$,columns$=""
 }
PRINT (textfile)FNxmltag$("column"+STR(column),"",value$)
WEND 
PRINT (textfile)FNxmltagclose$("row")
keyvalue$=$FF$,keyvalue$=KEY(datafile,END=*NEXT)
WEND 
RETURN 
! 
Sort:
LOCAL keyvalue$,count,rowattrs$
keyvalue$=$FF$,keyvalue$=KEY(datafile,END=*NEXT)
WHILE keyvalue$<>$FF$
READ (datafile,KEY=keyvalue$)
count++
rowattrs$=" key="""+FNencoding$(keyvalue$)+""""
PRINT (textfile)FNxmltag$("row",rowattrs$,"")
keyvalue$=$FF$,keyvalue$=KEY(datafile,END=*NEXT)
WEND 
RETURN 
! 
Indexed:
MSGBOX "Support for Indexed files not implemented","","STOP"	! *SC-OK*
RETURN 
! 
! ------------------------------------------------------------------------------
! 
